{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"supabase/wrappers Documentation : https://supabase.github.io/wrappers Source Code : https://github.com/supabase/wrappers Overview supabase/wrappers is a PostgreSQL extension that provides integrations with external sources so you can interact with third-party data using SQL. For example, the Stripe wrapper allows you to query and join against your Stripe customer data straight from PostgreSQL: 1 2 3 4 5 select customer_id currency from stripe . customers ; returns 1 2 3 4 customer_id | currency --------------------+----------- cus_MJiBtCqOF1Bb3F | usd (1 row) Currently supabase/wrappers supports: Integration Select Insert Update Delete Truncate Airtable BigQuery ClickHouse Firebase Logflare S3 Stripe","title":"Welcome"},{"location":"#supabasewrappers","text":"Documentation : https://supabase.github.io/wrappers Source Code : https://github.com/supabase/wrappers","title":"supabase/wrappers"},{"location":"#overview","text":"supabase/wrappers is a PostgreSQL extension that provides integrations with external sources so you can interact with third-party data using SQL. For example, the Stripe wrapper allows you to query and join against your Stripe customer data straight from PostgreSQL: 1 2 3 4 5 select customer_id currency from stripe . customers ; returns 1 2 3 4 customer_id | currency --------------------+----------- cus_MJiBtCqOF1Bb3F | usd (1 row) Currently supabase/wrappers supports: Integration Select Insert Update Delete Truncate Airtable BigQuery ClickHouse Firebase Logflare S3 Stripe","title":"Overview"},{"location":"airtable/","text":"Airtable is an easy-to-use online platform for creating and sharing relational databases. The Airtable Wrapper allows you to read data from your Airtable bases/tables within your Postgres database. Preparation Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper airtable_wrapper handler airtable_fdw_handler validator airtable_fdw_validator ; Secure your credentials (optional) By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'airtable' ); -- Save your Airtable API key in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( 'YOUR_SECRET' , ( select id from pgsodium . valid_key where name = 'airtable' ) ) returning key_id ; Connecting to Airtable We need to provide Postgres with the credentials to connect to Airtable, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 create server airtable_server foreign data wrapper airtable_wrapper options ( api_key_id '<key_ID>' -- The Key ID from above. ); 1 2 3 4 5 6 create server airtable_server foreign data wrapper airtable_wrapper options ( api_url 'https://api.airtable.com/v0' , -- Airtable API url, optional api_key '<Airtable API Key>' -- Airtable API key, required ); Creating Foreign Tables The Airtable Wrapper supports data reads from Airtable's Records endpoint ( read only ). Airtable Select Insert Update Delete Truncate Records For example: 1 2 3 4 5 6 7 8 9 create foreign table my_foreign_table ( name text , -- other fields ) server airtable_server options ( base_id 'appXXXX' , table_id 'tblXXXX' ); Foreign table options The full list of foreign table options are below: base_id - Airtable Base ID the table belongs to, required. table_id - Airtable table ID, required. Examples Some examples on how to use Airtable foreign tables. Basic example This will create a \"foreign table\" inside your Postgres database called airtable_table : 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table airtable_table ( name text , notes text , content text , amount numeric , updated_at timestamp ) server airtable_server options ( base_id 'appTc3yI68KN6ukZc' , table_id 'tbltiLinE56l3YKfn' ); You can now fetch your Airtable data from within your Postgres database: 1 select * from airtable_table ;","title":"Airtable"},{"location":"airtable/#preparation","text":"Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper airtable_wrapper handler airtable_fdw_handler validator airtable_fdw_validator ;","title":"Preparation"},{"location":"airtable/#secure-your-credentials-optional","text":"By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'airtable' ); -- Save your Airtable API key in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( 'YOUR_SECRET' , ( select id from pgsodium . valid_key where name = 'airtable' ) ) returning key_id ;","title":"Secure your credentials (optional)"},{"location":"airtable/#connecting-to-airtable","text":"We need to provide Postgres with the credentials to connect to Airtable, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 create server airtable_server foreign data wrapper airtable_wrapper options ( api_key_id '<key_ID>' -- The Key ID from above. ); 1 2 3 4 5 6 create server airtable_server foreign data wrapper airtable_wrapper options ( api_url 'https://api.airtable.com/v0' , -- Airtable API url, optional api_key '<Airtable API Key>' -- Airtable API key, required );","title":"Connecting to Airtable"},{"location":"airtable/#creating-foreign-tables","text":"The Airtable Wrapper supports data reads from Airtable's Records endpoint ( read only ). Airtable Select Insert Update Delete Truncate Records For example: 1 2 3 4 5 6 7 8 9 create foreign table my_foreign_table ( name text , -- other fields ) server airtable_server options ( base_id 'appXXXX' , table_id 'tblXXXX' );","title":"Creating Foreign Tables"},{"location":"airtable/#foreign-table-options","text":"The full list of foreign table options are below: base_id - Airtable Base ID the table belongs to, required. table_id - Airtable table ID, required.","title":"Foreign table options"},{"location":"airtable/#examples","text":"Some examples on how to use Airtable foreign tables.","title":"Examples"},{"location":"airtable/#basic-example","text":"This will create a \"foreign table\" inside your Postgres database called airtable_table : 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table airtable_table ( name text , notes text , content text , amount numeric , updated_at timestamp ) server airtable_server options ( base_id 'appTc3yI68KN6ukZc' , table_id 'tbltiLinE56l3YKfn' ); You can now fetch your Airtable data from within your Postgres database: 1 select * from airtable_table ;","title":"Basic example"},{"location":"bigquery/","text":"BigQuery is a completely serverless and cost-effective enterprise data warehouse that works across clouds and scales with your data, with BI, machine learning and AI built in. The BigQuery Wrapper allows you to read and write data from BigQuery within your Postgres database. Supported Data Types Postgres Type BigQuery Type boolean BOOL bigint INT64 double precision FLOAT64 numeric NUMERIC text STRING varchar STRING date DATE timestamp DATETIME timestamp TIMESTAMP Preparation Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper bigquery_wrapper handler big_query_fdw_handler validator big_query_fdw_validator ; Secure your credentials (optional) By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'bigquery' ); -- Save your BigQuery service account json in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( ' { \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", \"private_key_id\": \"your_private_key_id\", \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\", ... } ' , ( select id from pgsodium . valid_key where name = 'bigquery' ) ) returning key_id ; Connecting to BigQuery We need to provide Postgres with the credentials to connect to BigQuery, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 do $$ declare key_id text ; begin select id into key_id from pgsodium . valid_key where name = 'bigquery' limit 1 ; execute format ( E 'create server bigquery_server \\n' ' foreign data wrapper bigquery_wrapper \\n' ' options ( \\n' ' sa_key_id ''%s'', \\n' ' project_id ''your_gcp_project_id'', \\n' ' dataset_id ''your_gcp_dataset_id'' \\n' ' );' , key_id ); end $$ ; 1 2 3 4 5 6 7 8 9 10 11 12 13 create server bigquery_server foreign data wrapper bigquery_wrapper options ( sa_key ' { \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... } ' , project_id 'your_gcp_project_id' , dataset_id 'your_gcp_dataset_id' ); Creating Foreign Tables The BigQuery Wrapper supports data reads and writes from BigQuery. Integration Select Insert Update Delete Truncate BigQuery For example: 1 2 3 4 5 6 7 8 9 10 create foreign table my_bigquery_table ( id bigint , name text , ts timestamp ) server bigquery_server options ( table 'people' , location 'EU' ); Foreign table options The full list of foreign table options are below: table - Source table or view name in BigQuery, required. This can also be a subquery enclosed in parentheses, for example, 1 table '(select * except(props), to_json_string(props) as props from `my_project.my_dataset.my_table`)' Note : When using subquery in this option, full qualitified table name must be used. location - Source table location, optional. Default is 'US'. timeout - Query request timeout in milliseconds, optional. Default is '30000' (30 seconds). rowid_column - Primary key column name, optional for data scan, required for data modify Examples Some examples on how to use BigQuery foreign tables. Basic example This will create a \"foreign table\" inside your Postgres database called people : 1 2 3 4 5 6 7 8 9 10 11 12 -- Run below SQLs on BigQuery to create source table create table your_project_id . your_dataset_id . people ( id int64 , name string , ts timestamp ); -- Add some test data insert into your_project_id . your_dataset_id . people values ( 1 , 'Luke Skywalker' , current_timestamp ()), ( 2 , 'Leia Organa' , current_timestamp ()), ( 3 , 'Han Solo' , current_timestamp ()); Create foreign table on Postgres database: 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table people ( id bigint , name text , ts timestamp ) server bigquery_server options ( table 'people' , location 'EU' ); select * from people ;","title":"BigQuery"},{"location":"bigquery/#supported-data-types","text":"Postgres Type BigQuery Type boolean BOOL bigint INT64 double precision FLOAT64 numeric NUMERIC text STRING varchar STRING date DATE timestamp DATETIME timestamp TIMESTAMP","title":"Supported Data Types"},{"location":"bigquery/#preparation","text":"Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper bigquery_wrapper handler big_query_fdw_handler validator big_query_fdw_validator ;","title":"Preparation"},{"location":"bigquery/#secure-your-credentials-optional","text":"By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'bigquery' ); -- Save your BigQuery service account json in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( ' { \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", \"private_key_id\": \"your_private_key_id\", \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\", ... } ' , ( select id from pgsodium . valid_key where name = 'bigquery' ) ) returning key_id ;","title":"Secure your credentials (optional)"},{"location":"bigquery/#connecting-to-bigquery","text":"We need to provide Postgres with the credentials to connect to BigQuery, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 do $$ declare key_id text ; begin select id into key_id from pgsodium . valid_key where name = 'bigquery' limit 1 ; execute format ( E 'create server bigquery_server \\n' ' foreign data wrapper bigquery_wrapper \\n' ' options ( \\n' ' sa_key_id ''%s'', \\n' ' project_id ''your_gcp_project_id'', \\n' ' dataset_id ''your_gcp_dataset_id'' \\n' ' );' , key_id ); end $$ ; 1 2 3 4 5 6 7 8 9 10 11 12 13 create server bigquery_server foreign data wrapper bigquery_wrapper options ( sa_key ' { \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... } ' , project_id 'your_gcp_project_id' , dataset_id 'your_gcp_dataset_id' );","title":"Connecting to BigQuery"},{"location":"bigquery/#creating-foreign-tables","text":"The BigQuery Wrapper supports data reads and writes from BigQuery. Integration Select Insert Update Delete Truncate BigQuery For example: 1 2 3 4 5 6 7 8 9 10 create foreign table my_bigquery_table ( id bigint , name text , ts timestamp ) server bigquery_server options ( table 'people' , location 'EU' );","title":"Creating Foreign Tables"},{"location":"bigquery/#foreign-table-options","text":"The full list of foreign table options are below: table - Source table or view name in BigQuery, required. This can also be a subquery enclosed in parentheses, for example, 1 table '(select * except(props), to_json_string(props) as props from `my_project.my_dataset.my_table`)' Note : When using subquery in this option, full qualitified table name must be used. location - Source table location, optional. Default is 'US'. timeout - Query request timeout in milliseconds, optional. Default is '30000' (30 seconds). rowid_column - Primary key column name, optional for data scan, required for data modify","title":"Foreign table options"},{"location":"bigquery/#examples","text":"Some examples on how to use BigQuery foreign tables.","title":"Examples"},{"location":"bigquery/#basic-example","text":"This will create a \"foreign table\" inside your Postgres database called people : 1 2 3 4 5 6 7 8 9 10 11 12 -- Run below SQLs on BigQuery to create source table create table your_project_id . your_dataset_id . people ( id int64 , name string , ts timestamp ); -- Add some test data insert into your_project_id . your_dataset_id . people values ( 1 , 'Luke Skywalker' , current_timestamp ()), ( 2 , 'Leia Organa' , current_timestamp ()), ( 3 , 'Han Solo' , current_timestamp ()); Create foreign table on Postgres database: 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table people ( id bigint , name text , ts timestamp ) server bigquery_server options ( table 'people' , location 'EU' ); select * from people ;","title":"Basic example"},{"location":"clickhouse/","text":"ClickHouse is a fast open-source column-oriented database management system that allows generating analytical data reports in real-time using SQL queries. The ClickHouse Wrapper allows you to read and write data from ClickHouse within your Postgres database. Supported Data Types Postgres Type ClickHouse Type boolean UInt8 smallint Int16 integer UInt16 integer Int32 bigint UInt32 bigint Int64 bigint UInt64 real Float32 double precision Float64 text String date Date timestamp DateTime Preparation Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper clickhouse_wrapper handler click_house_fdw_handler validator click_house_fdw_validator ; Secure your credentials (optional) By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'clickhouse' ); -- Save your ClickHouse credential in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( 'tcp://default:@localhost:9000/default' , ( select id from pgsodium . valid_key where name = 'clickhouse' ) ) returning key_id ; Connecting to ClickHouse We need to provide Postgres with the credentials to connect to ClickHouse, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 6 7 8 9 10 11 12 13 do $$ declare key_id text ; begin select id into key_id from pgsodium . valid_key where name = 'clickhouse' limit 1 ; execute format ( E 'create server clickhouse_server \\n' ' foreign data wrapper clickhouse_server \\n' ' options (conn_string_id ''%s'');' , key_id ); end $$ ; 1 2 3 4 5 create server clickhouse_server foreign data wrapper clickhouse_wrapper options ( conn_string 'tcp://default:@localhost:9000/default' ); Creating Foreign Tables The ClickHouse Wrapper supports data reads and writes from ClickHouse. Integration Select Insert Update Delete Truncate ClickHouse For example: 1 2 3 4 5 6 7 8 create foreign table my_clickhouse_table ( id bigint , name text ) server clickhouse_server options ( table 'people' ); Foreign table options The full list of foreign table options are below: table - Source table name in ClickHouse, required. This can also be a subquery enclosed in parentheses, for example, 1 table '(select * from my_table)' Parametrized view is also supported in the subquery. In this case, you need to define a column for each parameter and use where to pass values to them. For example, 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table test_vw ( id bigint , col1 text , col2 bigint , _param1 text , _param2 bigint ) server clickhouse_server options ( table '(select * from my_view(column1=${_param1}, column2=${_param2}))' ); select * from test_vw where _param1 = 'aaa' and _param2 = 32 ; rowid_column - Primary key column name, optional for data scan, required for data modify Examples Some examples on how to use ClickHouse foreign tables. Basic example This will create a \"foreign table\" inside your Postgres database called people : 1 2 3 4 5 6 7 8 9 10 11 -- Run below SQLs on ClickHouse to create source table drop table if exists people ; create table people ( id Int64 , name String ) engine = MergeTree () order by id ; -- Add some test data insert into people values ( 1 , 'Luke Skywalker' ), ( 2 , 'Leia Organa' ), ( 3 , 'Han Solo' ); Create foreign table on Postgres database: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table people ( id bigint , name text ) server clickhouse_server options ( table 'people' ); -- data scan select * from people ; -- data modify insert into people values ( 4 , 'Yoda' ); update people set name = 'Princess Leia' where id = 2 ; delete from people where id = 3 ;","title":"ClickHouse"},{"location":"clickhouse/#supported-data-types","text":"Postgres Type ClickHouse Type boolean UInt8 smallint Int16 integer UInt16 integer Int32 bigint UInt32 bigint Int64 bigint UInt64 real Float32 double precision Float64 text String date Date timestamp DateTime","title":"Supported Data Types"},{"location":"clickhouse/#preparation","text":"Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper clickhouse_wrapper handler click_house_fdw_handler validator click_house_fdw_validator ;","title":"Preparation"},{"location":"clickhouse/#secure-your-credentials-optional","text":"By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'clickhouse' ); -- Save your ClickHouse credential in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( 'tcp://default:@localhost:9000/default' , ( select id from pgsodium . valid_key where name = 'clickhouse' ) ) returning key_id ;","title":"Secure your credentials (optional)"},{"location":"clickhouse/#connecting-to-clickhouse","text":"We need to provide Postgres with the credentials to connect to ClickHouse, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 6 7 8 9 10 11 12 13 do $$ declare key_id text ; begin select id into key_id from pgsodium . valid_key where name = 'clickhouse' limit 1 ; execute format ( E 'create server clickhouse_server \\n' ' foreign data wrapper clickhouse_server \\n' ' options (conn_string_id ''%s'');' , key_id ); end $$ ; 1 2 3 4 5 create server clickhouse_server foreign data wrapper clickhouse_wrapper options ( conn_string 'tcp://default:@localhost:9000/default' );","title":"Connecting to ClickHouse"},{"location":"clickhouse/#creating-foreign-tables","text":"The ClickHouse Wrapper supports data reads and writes from ClickHouse. Integration Select Insert Update Delete Truncate ClickHouse For example: 1 2 3 4 5 6 7 8 create foreign table my_clickhouse_table ( id bigint , name text ) server clickhouse_server options ( table 'people' );","title":"Creating Foreign Tables"},{"location":"clickhouse/#foreign-table-options","text":"The full list of foreign table options are below: table - Source table name in ClickHouse, required. This can also be a subquery enclosed in parentheses, for example, 1 table '(select * from my_table)' Parametrized view is also supported in the subquery. In this case, you need to define a column for each parameter and use where to pass values to them. For example, 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table test_vw ( id bigint , col1 text , col2 bigint , _param1 text , _param2 bigint ) server clickhouse_server options ( table '(select * from my_view(column1=${_param1}, column2=${_param2}))' ); select * from test_vw where _param1 = 'aaa' and _param2 = 32 ; rowid_column - Primary key column name, optional for data scan, required for data modify","title":"Foreign table options"},{"location":"clickhouse/#examples","text":"Some examples on how to use ClickHouse foreign tables.","title":"Examples"},{"location":"clickhouse/#basic-example","text":"This will create a \"foreign table\" inside your Postgres database called people : 1 2 3 4 5 6 7 8 9 10 11 -- Run below SQLs on ClickHouse to create source table drop table if exists people ; create table people ( id Int64 , name String ) engine = MergeTree () order by id ; -- Add some test data insert into people values ( 1 , 'Luke Skywalker' ), ( 2 , 'Leia Organa' ), ( 3 , 'Han Solo' ); Create foreign table on Postgres database: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table people ( id bigint , name text ) server clickhouse_server options ( table 'people' ); -- data scan select * from people ; -- data modify insert into people values ( 4 , 'Yoda' ); update people set name = 'Princess Leia' where id = 2 ; delete from people where id = 3 ;","title":"Basic example"},{"location":"contributing/","text":"supabase/wrappers is OSS. PRs and issues are welcome. Development Requirements: rust cargo docker-compose pgrx Testing Tests are located in ./test/sql with expected output in ./test/expected To run tests locally, execute: 1 2 cd wrappers docker-compose -f .ci/docker-compose.yaml run test-wrappers Interactive PSQL Development To reduce the iteration cycle, you may want to launch a psql prompt with wrappers installed to experiment 1 2 cd wrappers cargo pgrx run pg14 --features clickhouse_fdw Try out the commands below to spin up a database with the extension installed & query a table using GraphQL. Experiment with aliasing field/table names and filtering on different columns. 1 2 > create extension wrappers cascade ; CREATE EXTENSION Documentation All public API must be documented. Building documentation requires python 3.6+ Install Dependencies Install mkdocs, themes, and extensions. 1 pip install -r docs/requirements_docs.txt Serving To serve the documentation locally run 1 mkdocs serve and visit the docs at http://127.0.0.1:8000/wrappers/ Deploying If you have write access to the repo, docs can be updated using 1 mkdocs gh-deploy","title":"Contributing"},{"location":"contributing/#development","text":"Requirements: rust cargo docker-compose pgrx","title":"Development"},{"location":"contributing/#testing","text":"Tests are located in ./test/sql with expected output in ./test/expected To run tests locally, execute: 1 2 cd wrappers docker-compose -f .ci/docker-compose.yaml run test-wrappers","title":"Testing"},{"location":"contributing/#interactive-psql-development","text":"To reduce the iteration cycle, you may want to launch a psql prompt with wrappers installed to experiment 1 2 cd wrappers cargo pgrx run pg14 --features clickhouse_fdw Try out the commands below to spin up a database with the extension installed & query a table using GraphQL. Experiment with aliasing field/table names and filtering on different columns. 1 2 > create extension wrappers cascade ; CREATE EXTENSION","title":"Interactive PSQL Development"},{"location":"contributing/#documentation","text":"All public API must be documented. Building documentation requires python 3.6+","title":"Documentation"},{"location":"contributing/#install-dependencies","text":"Install mkdocs, themes, and extensions. 1 pip install -r docs/requirements_docs.txt","title":"Install Dependencies"},{"location":"contributing/#serving","text":"To serve the documentation locally run 1 mkdocs serve and visit the docs at http://127.0.0.1:8000/wrappers/","title":"Serving"},{"location":"contributing/#deploying","text":"If you have write access to the repo, docs can be updated using 1 mkdocs gh-deploy","title":"Deploying"},{"location":"firebase/","text":"Firebase is an app development platform built around non-relational technologies. The Firebase Wrapper supports connecting to below objects. Authentication Users ( read only ) Firestore Database Documents ( read only ) Preparation Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper firebase_wrapper handler firebase_fdw_handler validator firebase_fdw_validator ; Secure your credentials (optional) By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'firebase' ); -- Save your Firebase credentials in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( '{ \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... }' , ( select id from pgsodium . valid_key where name = 'firebase' ) ) returning key_id ; Connecting to Firebase We need to provide Postgres with the credentials to connect to Firebase, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 6 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key_id '<your key_id from above>' project_id '<firebase_project_id>' ); 1 2 3 4 5 6 7 8 9 10 11 12 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key ' { \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... } ' , project_id 'firebase_project_id' , ); Creating Foreign Tables The Firebase Wrapper supports reading data from below Firebase's objects: Firebase Select Insert Update Delete Truncate Authentication Users Firestore Database Documents For example: 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_users ( uid text , email text , created_at timestamp , attrs jsonb ) server firebase_server options ( object 'auth/users' ); Note there is a meta column attrs in the foreign table, which contains all the returned data from Firebase as json format. Foreign table options The full list of foreign table options are below: object - Object name in Firebase, required. Examples Some examples on how to use Firebase foreign tables. firestore To map a Firestore collection provide its location using the format firestore/<collection_id> as the object option as shown below. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_docs ( name text , created_at timestamp , updated_at timestamp , attrs jsonb ) server firebase_server options ( object 'firestore/user-profiles' -- format: 'firestore/[collection_id]' ); Note that name , created_at , and updated_at , are automatic metadata fields on all Firestore collections. auth/users The auth/users collection is a special case with unique metadata. The following shows how to map Firebase users to PostgreSQL table. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_users ( uid text , email text , created_at timestamp , attrs jsonb ) server firebase_server options ( object 'auth/users' );","title":"Firebase"},{"location":"firebase/#preparation","text":"Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper firebase_wrapper handler firebase_fdw_handler validator firebase_fdw_validator ;","title":"Preparation"},{"location":"firebase/#secure-your-credentials-optional","text":"By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'firebase' ); -- Save your Firebase credentials in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( '{ \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... }' , ( select id from pgsodium . valid_key where name = 'firebase' ) ) returning key_id ;","title":"Secure your credentials (optional)"},{"location":"firebase/#connecting-to-firebase","text":"We need to provide Postgres with the credentials to connect to Firebase, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 6 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key_id '<your key_id from above>' project_id '<firebase_project_id>' ); 1 2 3 4 5 6 7 8 9 10 11 12 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key ' { \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... } ' , project_id 'firebase_project_id' , );","title":"Connecting to Firebase"},{"location":"firebase/#creating-foreign-tables","text":"The Firebase Wrapper supports reading data from below Firebase's objects: Firebase Select Insert Update Delete Truncate Authentication Users Firestore Database Documents For example: 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_users ( uid text , email text , created_at timestamp , attrs jsonb ) server firebase_server options ( object 'auth/users' ); Note there is a meta column attrs in the foreign table, which contains all the returned data from Firebase as json format.","title":"Creating Foreign Tables"},{"location":"firebase/#foreign-table-options","text":"The full list of foreign table options are below: object - Object name in Firebase, required.","title":"Foreign table options"},{"location":"firebase/#examples","text":"Some examples on how to use Firebase foreign tables.","title":"Examples"},{"location":"firebase/#firestore","text":"To map a Firestore collection provide its location using the format firestore/<collection_id> as the object option as shown below. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_docs ( name text , created_at timestamp , updated_at timestamp , attrs jsonb ) server firebase_server options ( object 'firestore/user-profiles' -- format: 'firestore/[collection_id]' ); Note that name , created_at , and updated_at , are automatic metadata fields on all Firestore collections.","title":"firestore"},{"location":"firebase/#authusers","text":"The auth/users collection is a special case with unique metadata. The following shows how to map Firebase users to PostgreSQL table. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_users ( uid text , email text , created_at timestamp , attrs jsonb ) server firebase_server options ( object 'auth/users' );","title":"auth/users"},{"location":"installation/","text":"First, install pgrx Then clone the repo and install using 1 2 3 git clone https://github.com/supabase/wrappers.git cd wrappers/wrappers cargo pgrx install --no-default-features --features pg14,<some_integration>_fdw --release To enable the extension in PostgreSQL we must execute a create extension statement. 1 create extension wrappers ;","title":"Installation"},{"location":"logflare/","text":"Logflare is a centralized web-based log management solution to easily access Cloudflare, Vercel & Elixir logs. The Logflare Wrapper allows you to read data from Logflare endpoints within your Postgres database. Preparation Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper logflare_wrapper handler logflare_fdw_handler validator logflare_fdw_validator ; Secure your credentials (optional) By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'logflare' ); -- Save your Logflare API key in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( 'YOUR_SECRET' , ( select id from pgsodium . valid_key where name = 'logflare' ) ) returning key_id ; Connecting to Logflare We need to provide Postgres with the credentials to connect to Logflare, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 create server logflare_server foreign data wrapper logflare_wrapper options ( api_key_id '<key_ID>' -- The Key ID from above. ); 1 2 3 4 5 create server logflare_server foreign data wrapper logflare_wrapper options ( api_key '<Logflare API Key>' -- Logflare API key, required ); Creating Foreign Tables The Logflare Wrapper supports data reads from Logflare's endpoints. Integration Select Insert Update Delete Truncate Logflare For example: 1 2 3 4 5 6 7 8 9 create foreign table my_logflare_table ( id bigint , name text , _result text ) server logflare_server options ( endpoint '9dd9a6f6-8e9b-4fa4-b682-4f2f5cd99da3' ); Meta column You can define a specific meta column _result (data type: text ) in the foreign table. It will store the whole result record in JSON string format, so you can extract any fields from it using Postgres JSON queries like _result::json->>'foo' . See more examples below. Query parameters Logflare endpoint query parameters can be passed using specific parameter columns like _param_foo and _param_bar . See more examples below. Foreign table options The full list of foreign table options are below: endpoint - Logflare endpoint UUID or name, required. Examples Some examples on how to use Logflare foreign tables. Basic example Assume the Logflare endpoint response is like below: 1 2 3 4 5 6 [ { \"id\" : 123 , \"name\" : \"foo\" } ] Then we can define a foreign table like this: 1 2 3 4 5 6 7 8 9 10 11 create foreign table people ( id bigint , name text , _result text ) server logflare_server options ( endpoint '9dd9a6f6-8e9b-4fa4-b682-4f2f5cd99da3' ); select * from people ; Query parameters example Suppose the Logflare endpoint accepts 3 parameters: org_id iso_timestamp_start iso_timestamp_end And its response is like below: 1 2 3 4 5 6 7 8 [ { \"db_size\" : \"large\" , \"org_id\" : \"123\" , \"runtime_hours\" : 21.95 , \"runtime_minutes\" : 1317 } ] We can define a foreign table and parameter columns like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 create foreign table runtime_hours ( db_size text , org_id text , runtime_hours numeric , runtime_minutes bigint , _param_org_id bigint , _param_iso_timestamp_start text , _param_iso_timestamp_end text , _result text ) server logflare_server options ( endpoint 'my.custom.endpoint' ); and query it with parameters like this: 1 2 3 4 5 6 7 8 9 10 select db_size , org_id , runtime_hours , runtime_minutes from runtime_hours where _param_org_id = 123 and _param_iso_timestamp_start = '2023-07-01 02:03:04' and _param_iso_timestamp_end = '2023-07-02' ;","title":"Logflare"},{"location":"logflare/#preparation","text":"Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper logflare_wrapper handler logflare_fdw_handler validator logflare_fdw_validator ;","title":"Preparation"},{"location":"logflare/#secure-your-credentials-optional","text":"By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'logflare' ); -- Save your Logflare API key in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( 'YOUR_SECRET' , ( select id from pgsodium . valid_key where name = 'logflare' ) ) returning key_id ;","title":"Secure your credentials (optional)"},{"location":"logflare/#connecting-to-logflare","text":"We need to provide Postgres with the credentials to connect to Logflare, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 create server logflare_server foreign data wrapper logflare_wrapper options ( api_key_id '<key_ID>' -- The Key ID from above. ); 1 2 3 4 5 create server logflare_server foreign data wrapper logflare_wrapper options ( api_key '<Logflare API Key>' -- Logflare API key, required );","title":"Connecting to Logflare"},{"location":"logflare/#creating-foreign-tables","text":"The Logflare Wrapper supports data reads from Logflare's endpoints. Integration Select Insert Update Delete Truncate Logflare For example: 1 2 3 4 5 6 7 8 9 create foreign table my_logflare_table ( id bigint , name text , _result text ) server logflare_server options ( endpoint '9dd9a6f6-8e9b-4fa4-b682-4f2f5cd99da3' );","title":"Creating Foreign Tables"},{"location":"logflare/#meta-column","text":"You can define a specific meta column _result (data type: text ) in the foreign table. It will store the whole result record in JSON string format, so you can extract any fields from it using Postgres JSON queries like _result::json->>'foo' . See more examples below.","title":"Meta column"},{"location":"logflare/#query-parameters","text":"Logflare endpoint query parameters can be passed using specific parameter columns like _param_foo and _param_bar . See more examples below.","title":"Query parameters"},{"location":"logflare/#foreign-table-options","text":"The full list of foreign table options are below: endpoint - Logflare endpoint UUID or name, required.","title":"Foreign table options"},{"location":"logflare/#examples","text":"Some examples on how to use Logflare foreign tables.","title":"Examples"},{"location":"logflare/#basic-example","text":"Assume the Logflare endpoint response is like below: 1 2 3 4 5 6 [ { \"id\" : 123 , \"name\" : \"foo\" } ] Then we can define a foreign table like this: 1 2 3 4 5 6 7 8 9 10 11 create foreign table people ( id bigint , name text , _result text ) server logflare_server options ( endpoint '9dd9a6f6-8e9b-4fa4-b682-4f2f5cd99da3' ); select * from people ;","title":"Basic example"},{"location":"logflare/#query-parameters-example","text":"Suppose the Logflare endpoint accepts 3 parameters: org_id iso_timestamp_start iso_timestamp_end And its response is like below: 1 2 3 4 5 6 7 8 [ { \"db_size\" : \"large\" , \"org_id\" : \"123\" , \"runtime_hours\" : 21.95 , \"runtime_minutes\" : 1317 } ] We can define a foreign table and parameter columns like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 create foreign table runtime_hours ( db_size text , org_id text , runtime_hours numeric , runtime_minutes bigint , _param_org_id bigint , _param_iso_timestamp_start text , _param_iso_timestamp_end text , _result text ) server logflare_server options ( endpoint 'my.custom.endpoint' ); and query it with parameters like this: 1 2 3 4 5 6 7 8 9 10 select db_size , org_id , runtime_hours , runtime_minutes from runtime_hours where _param_org_id = 123 and _param_iso_timestamp_start = '2023-07-01 02:03:04' and _param_iso_timestamp_end = '2023-07-02' ;","title":"Query parameters example"},{"location":"s3/","text":"AWS S3 is an object storage service offering industry-leading scalability, data availability, security, and performance. It is read-only and supports below file formats: The S3 Wrapper allows you to read data of below formats from S3 within your Postgres database. CSV - with or without header line JSON Lines Parquet The S3 Wrapper also supports below compression algorithms: gzip bzip2 xz zlib Note for CSV and JSONL files: currently all columns in S3 files must be defined in the foreign table and their types must be text type . Note for Parquet files: the whole Parquet file will be loaded into local memory if it is compressed, so keep the file size as small as possible . Supported Data Types For Parquet File The S3 Wrapper uses Parquet file data types from arrow_array::types , below are their mappings to Postgres data types. Postgres Type Parquet Type boolean BooleanType char Int8Type smallint Int16Type real Float32Type integer Int32Type double precision Float64Type bigint Int64Type numeric Float64Type text ByteArrayType date Date64Type timestamp TimestampNanosecondType Preparation Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper s3_wrapper handler s3_fdw_handler validator s3_fdw_validator ; Secure your credentials (optional) By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'vault_access_key_id' ); select pgsodium . create_key ( name : = 'vault_secret_access_key' ); -- Save your AWS credential in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( '<access key id>' , ( select id from pgsodium . valid_key where name = 'vault_access_key_id' ) ) returning key_id ; insert into vault . secrets ( secret , key_id ) values ( '<secret access key>' , ( select id from pgsodium . valid_key where name = 'vault_secret_access_key' ) ) returning key_id ; Connecting to S3 We need to provide Postgres with the credentials to connect to S3, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 6 7 create server s3_server foreign data wrapper s3_wrapper options ( vault_access_key_id '<your vault_access_key_id from above>' , vault_secret_access_key '<your vault_secret_access_key_id from above>' , aws_region 'us-east-1' ); 1 2 3 4 5 6 7 create server s3_server foreign data wrapper s3_wrapper options ( aws_access_key_id 'your_aws_access_key_id' , aws_secret_access_key 'your_aws_secret_access_key' , aws_region 'us-east-1' ); Creating Foreign Tables The S3 Wrapper supports data reads from S3. Integration Select Insert Update Delete Truncate S3 For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table s3_table_csv ( name text , sex text , age text , height text , weight text ) server s3_server options ( uri 's3://bucket/s3_table.csv' , format 'csv' , has_header 'true' ); One file in S3 corresponds a foreign table in Postgres. For CSV and JSONL file, all columns must be present in the foreign table and type must be text . You can do custom transformations, like type conversion, by creating a view on top of the foreign table or using a subquery. For Parquet file, no need to define all columns in the foreign table but column names must match between Parquet file and its foreign table. Foreign table options The full list of foreign table options are below: uri - S3 URI, required. For example, s3://bucket/s3_table.csv format - File format, required. csv , jsonl , or parquet has_header - If the CSV file has header, optional. true or false , default is false compress - Compression algorithm, optional. One of gzip , bzip2 , xz , zlib , default is no compression Examples Some examples on how to use S3 foreign tables. Basic example This will create some \"foreign table\" inside your Postgres database can read data from S3: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 -- CSV file, no compression create foreign table s3_table_csv ( name text , sex text , age text , height text , weight text ) server s3_server options ( uri 's3://bucket/s3_table.csv' , format 'csv' , has_header 'true' ); -- JSON line file, no compression create foreign table s3_table_jsonl ( name text , sex text , age text , height text , weight text ) server s3_server options ( uri 's3://bucket/s3_table.jsonl' , format 'jsonl' ); -- GZIP compressed CSV file create foreign table s3_table_csv_gzip ( name text , sex text , age text , height text , weight text ) server s3_server options ( uri 's3://bucket/s3_table.csv.gz' , format 'csv' , has_header 'true' , compress 'gzip' ); -- Parquet file, no compression create foreign table s3_table_parquet ( id integer , bool_col boolean , bigint_col bigint , float_col real , date_string_col text , timestamp_col timestamp ) server s3_server options ( uri 's3://bucket/s3_table.parquet' , format 'parquet' ); -- GZIP compressed Parquet file create foreign table s3_table_parquet_gz ( id integer , bool_col boolean , bigint_col bigint , float_col real , date_string_col text , timestamp_col timestamp ) server s3_server options ( uri 's3://bucket/s3_table.parquet.gz' , format 'parquet' , compress 'gzip' );","title":"S3"},{"location":"s3/#supported-data-types-for-parquet-file","text":"The S3 Wrapper uses Parquet file data types from arrow_array::types , below are their mappings to Postgres data types. Postgres Type Parquet Type boolean BooleanType char Int8Type smallint Int16Type real Float32Type integer Int32Type double precision Float64Type bigint Int64Type numeric Float64Type text ByteArrayType date Date64Type timestamp TimestampNanosecondType","title":"Supported Data Types For Parquet File"},{"location":"s3/#preparation","text":"Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper s3_wrapper handler s3_fdw_handler validator s3_fdw_validator ;","title":"Preparation"},{"location":"s3/#secure-your-credentials-optional","text":"By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'vault_access_key_id' ); select pgsodium . create_key ( name : = 'vault_secret_access_key' ); -- Save your AWS credential in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( '<access key id>' , ( select id from pgsodium . valid_key where name = 'vault_access_key_id' ) ) returning key_id ; insert into vault . secrets ( secret , key_id ) values ( '<secret access key>' , ( select id from pgsodium . valid_key where name = 'vault_secret_access_key' ) ) returning key_id ;","title":"Secure your credentials (optional)"},{"location":"s3/#connecting-to-s3","text":"We need to provide Postgres with the credentials to connect to S3, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 6 7 create server s3_server foreign data wrapper s3_wrapper options ( vault_access_key_id '<your vault_access_key_id from above>' , vault_secret_access_key '<your vault_secret_access_key_id from above>' , aws_region 'us-east-1' ); 1 2 3 4 5 6 7 create server s3_server foreign data wrapper s3_wrapper options ( aws_access_key_id 'your_aws_access_key_id' , aws_secret_access_key 'your_aws_secret_access_key' , aws_region 'us-east-1' );","title":"Connecting to S3"},{"location":"s3/#creating-foreign-tables","text":"The S3 Wrapper supports data reads from S3. Integration Select Insert Update Delete Truncate S3 For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table s3_table_csv ( name text , sex text , age text , height text , weight text ) server s3_server options ( uri 's3://bucket/s3_table.csv' , format 'csv' , has_header 'true' ); One file in S3 corresponds a foreign table in Postgres. For CSV and JSONL file, all columns must be present in the foreign table and type must be text . You can do custom transformations, like type conversion, by creating a view on top of the foreign table or using a subquery. For Parquet file, no need to define all columns in the foreign table but column names must match between Parquet file and its foreign table.","title":"Creating Foreign Tables"},{"location":"s3/#foreign-table-options","text":"The full list of foreign table options are below: uri - S3 URI, required. For example, s3://bucket/s3_table.csv format - File format, required. csv , jsonl , or parquet has_header - If the CSV file has header, optional. true or false , default is false compress - Compression algorithm, optional. One of gzip , bzip2 , xz , zlib , default is no compression","title":"Foreign table options"},{"location":"s3/#examples","text":"Some examples on how to use S3 foreign tables.","title":"Examples"},{"location":"s3/#basic-example","text":"This will create some \"foreign table\" inside your Postgres database can read data from S3: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 -- CSV file, no compression create foreign table s3_table_csv ( name text , sex text , age text , height text , weight text ) server s3_server options ( uri 's3://bucket/s3_table.csv' , format 'csv' , has_header 'true' ); -- JSON line file, no compression create foreign table s3_table_jsonl ( name text , sex text , age text , height text , weight text ) server s3_server options ( uri 's3://bucket/s3_table.jsonl' , format 'jsonl' ); -- GZIP compressed CSV file create foreign table s3_table_csv_gzip ( name text , sex text , age text , height text , weight text ) server s3_server options ( uri 's3://bucket/s3_table.csv.gz' , format 'csv' , has_header 'true' , compress 'gzip' ); -- Parquet file, no compression create foreign table s3_table_parquet ( id integer , bool_col boolean , bigint_col bigint , float_col real , date_string_col text , timestamp_col timestamp ) server s3_server options ( uri 's3://bucket/s3_table.parquet' , format 'parquet' ); -- GZIP compressed Parquet file create foreign table s3_table_parquet_gz ( id integer , bool_col boolean , bigint_col bigint , float_col real , date_string_col text , timestamp_col timestamp ) server s3_server options ( uri 's3://bucket/s3_table.parquet.gz' , format 'parquet' , compress 'gzip' );","title":"Basic example"},{"location":"stripe/","text":"Stripe is an API driven online payment processing utility. supabase/wrappers exposes below endpoints. Preparation Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper stripe_wrapper handler stripe_fdw_handler validator stripe_fdw_validator ; Secure your credentials (optional) By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'stripe' ); -- Save your Stripe API key in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( 'YOUR_SECRET' , ( select id from pgsodium . valid_key where name = 'stripe' ) ) returning key_id ; Connecting to Stripe We need to provide Postgres with the credentials to connect to Stripe, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key_id '<key_ID>' -- The Key ID from above. ); 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key '<Stripe API Key>' -- Stripe API key, required ); Creating Foreign Tables The Stripe Wrapper supports data read and modify from Stripe API. Object Select Insert Update Delete Truncate Accounts Balance Balance Transactions Charges Checkout Sessions Customers Disputes Events Files File Links Invoices Mandates PaymentIntents Payouts Prices Products Refunds SetupAttempts SetupIntents Subscriptions Tokens Topups Transfers The Stripe foreign tables mirror Stripe's API. We can create a schema to hold all the Stripe tables. 1 create schema stripe ; Then create the foreign table, for example: 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . accounts ( id text , business_type text , country text , email text , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'accounts' ); attrs is a special column which stores all the object attributes in JSON format, you can extract any attributes needed or its associated sub objects from it. See more examples below. Accounts read only This is an object representing a Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . accounts ( id text , business_type text , country text , email text , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'accounts' ); While any column is allowed in a where clause, it is most efficient to filter by: id Balance read only Shows the balance currently on your Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 create foreign table stripe . balance ( balance_type text , amount bigint , currency text , attrs jsonb ) server stripe_server options ( object 'balance' ); Balance Transactions read only Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . balance_transactions ( id text , amount bigint , currency text , description text , fee bigint , net bigint , status text , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'balance_transactions' ); While any column is allowed in a where clause, it is most efficient to filter by: id type Charges read only To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . charges ( id text , amount bigint , currency text , customer text , description text , invoice text , payment_intent text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'charges' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer Checkout Sessions read only A Checkout Session represents your customer's session as they pay for one-time purchases or subscriptions through Checkout or Payment Links. We recommend creating a new Session each time your customer attempts to pay. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table stripe . checkout_sessions ( id text , customer text , payment_intent text , subscription text , attrs jsonb ) server stripe_server options ( object 'checkout/sessions' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer payment_intent subscription Customers read and modify Contains customers known to Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . customers ( id text , email text , name text , description text , created timestamp , attrs jsonb ) server stripe_server options ( object 'customers' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id email Disputes read only A dispute occurs when a customer questions your charge with their card issuer. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . disputes ( id text , amount bigint , currency text , charge text , payment_intent text , reason text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'disputes' ); While any column is allowed in a where clause, it is most efficient to filter by: id charge payment_intent Events read only Events are our way of letting you know when something interesting happens in your account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 create foreign table stripe . events ( id text , type text , api_version text , created timestamp , attrs jsonb ) server stripe_server options ( object 'events' ); While any column is allowed in a where clause, it is most efficient to filter by: id type Files read only This is an object representing a file hosted on Stripe's servers. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . files ( id text , filename text , purpose text , title text , size bigint , type text , url text , created timestamp , expires_at timestamp , attrs jsonb ) server stripe_server options ( object 'files' ); While any column is allowed in a where clause, it is most efficient to filter by: id purpose File Links read only To share the contents of a File object with non-Stripe users, you can create a FileLink . Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . file_links ( id text , file text , url text , created timestamp , expired bool , expires_at timestamp , attrs jsonb ) server stripe_server options ( object 'file_links' ); Invoices read only Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . invoices ( id text , customer text , subscription text , status text , total bigint , currency text , period_start timestamp , period_end timestamp , attrs jsonb ) server stripe_server options ( object 'invoices' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer status subscription Mandates read only A Mandate is a record of the permission a customer has given you to debit their payment method. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 create foreign table stripe . mandates ( id text , payment_method text , status text , type text , attrs jsonb ) server stripe_server options ( object 'mandates' ); While any column is allowed in a where clause, it is most efficient to filter by: id Payment Intents read only A payment intent guides you through the process of collecting a payment from your customer. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . payment_intents ( id text , customer text , amount bigint , currency text , payment_method text , created timestamp , attrs jsonb ) server stripe_server options ( object 'payment_intents' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer Payouts read only A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . payouts ( id text , amount bigint , currency text , arrival_date timestamp , description text , statement_descriptor text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'payouts' ); While any column is allowed in a where clause, it is most efficient to filter by: id status Prices read only A Price object is needed for all of your products to facilitate multiple currencies and pricing options. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 create foreign table stripe . prices ( id text , active bool , currency text , product text , unit_amount bigint , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'pricing' ); While any column is allowed in a where clause, it is most efficient to filter by: id active Products read and modify All products available in Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . products ( id text , name text , active bool , default_price text , description text , created timestamp , updated timestamp , attrs jsonb ) server stripe_server options ( object 'products' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id active Refunds read only Refund objects allow you to refund a charge that has previously been created but not yet refunded. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . refunds ( id text , amount bigint , currency text , charge text , payment_intent text , reason text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'refunds' ); While any column is allowed in a where clause, it is most efficient to filter by: id charge payment_intent SetupAttempts read only A SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation was successful or unsuccessful. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . setup_attempts ( id text , application text , customer text , on_behalf_of text , payment_method text , setup_intent text , status text , usage text , created timestamp , attrs jsonb ) server stripe_server options ( object 'setup_attempts' ); While any column is allowed in a where clause, it is most efficient to filter by: id setup_intent SetupIntents read only A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . setup_intents ( id text , client_secret text , customer text , description text , payment_method text , status text , usage text , created timestamp , attrs jsonb ) server stripe_server options ( object 'setup_intents' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer payment_method Subscriptions read and modify Customer recurring payment schedules. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . subscriptions ( id text , customer text , currency text , current_period_start timestamp , current_period_end timestamp , attrs jsonb ) server stripe_server options ( object 'subscriptions' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer price status Tokens read only Tokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table stripe . tokens ( id text , customer text , currency text , current_period_start timestamp , current_period_end timestamp , attrs jsonb ) server stripe_server options ( object 'tokens' ); Top-ups read only To top up your Stripe balance, you create a top-up object. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . topups ( id text , amount bigint , currency text , description text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'topups' ); While any column is allowed in a where clause, it is most efficient to filter by: id status Transfers read only A Transfer object is created when you move funds between Stripe accounts as part of Connect. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . transfers ( id text , amount bigint , currency text , description text , destination text , created timestamp , attrs jsonb ) server stripe_server options ( object 'transfers' ); While any column is allowed in a where clause, it is most efficient to filter by: id destination Examples Some examples on how to use Stripe foreign tables. Basic example 1 2 3 4 -- always limit records to reduce API calls to Stripe select * from stripe . customers limit 10 ; select * from stripe . invoices limit 10 ; select * from stripe . subscriptions limit 10 ; Query JSON attributes 1 2 3 4 5 6 7 8 9 10 11 -- extract account name for an invoice select id , attrs ->> 'account_name' as account_name from stripe . invoices where id = 'in_xxx' ; -- extract invoice line items for an invoice select id , attrs #> '{lines,data}' as line_items from stripe . invoices where id = 'in_xxx' ; -- extract subscription items for a subscription select id , attrs #> '{items,data}' as items from stripe . subscriptions where id = 'sub_xxx' ; Data modify 1 2 3 4 insert into stripe . customers ( email , name , description ) values ( 'test@test.com' , 'test name' , null ); update stripe . customers set description = 'hello fdw' where id = 'cus_xxx' ; update stripe . customers set attrs = '{\"metadata[foo]\": \"bar\"}' where id = 'cus_xxx' ; delete from stripe . customers where id = 'cus_xxx' ;","title":"Stripe"},{"location":"stripe/#preparation","text":"Before you get started, make sure the wrappers extension is installed on your database: 1 create extension if not exists wrappers ; and then create the foreign data wrapper: 1 2 3 create foreign data wrapper stripe_wrapper handler stripe_fdw_handler validator stripe_fdw_validator ;","title":"Preparation"},{"location":"stripe/#secure-your-credentials-optional","text":"By default, Postgres stores FDW credentials inide pg_catalog.pg_foreign_server in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault , which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials. 1 2 3 4 5 6 7 8 9 10 -- Create a secure key using pgsodium: select pgsodium . create_key ( name : = 'stripe' ); -- Save your Stripe API key in Vault and retrieve the `key_id` insert into vault . secrets ( secret , key_id ) values ( 'YOUR_SECRET' , ( select id from pgsodium . valid_key where name = 'stripe' ) ) returning key_id ;","title":"Secure your credentials (optional)"},{"location":"stripe/#connecting-to-stripe","text":"We need to provide Postgres with the credentials to connect to Stripe, and any additional options. We can do this using the create server command: With Vault Without Vault 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key_id '<key_ID>' -- The Key ID from above. ); 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key '<Stripe API Key>' -- Stripe API key, required );","title":"Connecting to Stripe"},{"location":"stripe/#creating-foreign-tables","text":"The Stripe Wrapper supports data read and modify from Stripe API. Object Select Insert Update Delete Truncate Accounts Balance Balance Transactions Charges Checkout Sessions Customers Disputes Events Files File Links Invoices Mandates PaymentIntents Payouts Prices Products Refunds SetupAttempts SetupIntents Subscriptions Tokens Topups Transfers The Stripe foreign tables mirror Stripe's API. We can create a schema to hold all the Stripe tables. 1 create schema stripe ; Then create the foreign table, for example: 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . accounts ( id text , business_type text , country text , email text , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'accounts' ); attrs is a special column which stores all the object attributes in JSON format, you can extract any attributes needed or its associated sub objects from it. See more examples below.","title":"Creating Foreign Tables"},{"location":"stripe/#accounts","text":"read only This is an object representing a Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . accounts ( id text , business_type text , country text , email text , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'accounts' ); While any column is allowed in a where clause, it is most efficient to filter by: id","title":"Accounts"},{"location":"stripe/#balance","text":"read only Shows the balance currently on your Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 create foreign table stripe . balance ( balance_type text , amount bigint , currency text , attrs jsonb ) server stripe_server options ( object 'balance' );","title":"Balance"},{"location":"stripe/#balance-transactions","text":"read only Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . balance_transactions ( id text , amount bigint , currency text , description text , fee bigint , net bigint , status text , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'balance_transactions' ); While any column is allowed in a where clause, it is most efficient to filter by: id type","title":"Balance Transactions"},{"location":"stripe/#charges","text":"read only To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . charges ( id text , amount bigint , currency text , customer text , description text , invoice text , payment_intent text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'charges' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer","title":"Charges"},{"location":"stripe/#checkout-sessions","text":"read only A Checkout Session represents your customer's session as they pay for one-time purchases or subscriptions through Checkout or Payment Links. We recommend creating a new Session each time your customer attempts to pay. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table stripe . checkout_sessions ( id text , customer text , payment_intent text , subscription text , attrs jsonb ) server stripe_server options ( object 'checkout/sessions' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer payment_intent subscription","title":"Checkout Sessions"},{"location":"stripe/#customers","text":"read and modify Contains customers known to Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . customers ( id text , email text , name text , description text , created timestamp , attrs jsonb ) server stripe_server options ( object 'customers' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id email","title":"Customers"},{"location":"stripe/#disputes","text":"read only A dispute occurs when a customer questions your charge with their card issuer. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . disputes ( id text , amount bigint , currency text , charge text , payment_intent text , reason text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'disputes' ); While any column is allowed in a where clause, it is most efficient to filter by: id charge payment_intent","title":"Disputes"},{"location":"stripe/#events","text":"read only Events are our way of letting you know when something interesting happens in your account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 create foreign table stripe . events ( id text , type text , api_version text , created timestamp , attrs jsonb ) server stripe_server options ( object 'events' ); While any column is allowed in a where clause, it is most efficient to filter by: id type","title":"Events"},{"location":"stripe/#files","text":"read only This is an object representing a file hosted on Stripe's servers. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . files ( id text , filename text , purpose text , title text , size bigint , type text , url text , created timestamp , expires_at timestamp , attrs jsonb ) server stripe_server options ( object 'files' ); While any column is allowed in a where clause, it is most efficient to filter by: id purpose","title":"Files"},{"location":"stripe/#file-links","text":"read only To share the contents of a File object with non-Stripe users, you can create a FileLink . Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . file_links ( id text , file text , url text , created timestamp , expired bool , expires_at timestamp , attrs jsonb ) server stripe_server options ( object 'file_links' );","title":"File Links"},{"location":"stripe/#invoices","text":"read only Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . invoices ( id text , customer text , subscription text , status text , total bigint , currency text , period_start timestamp , period_end timestamp , attrs jsonb ) server stripe_server options ( object 'invoices' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer status subscription","title":"Invoices"},{"location":"stripe/#mandates","text":"read only A Mandate is a record of the permission a customer has given you to debit their payment method. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 create foreign table stripe . mandates ( id text , payment_method text , status text , type text , attrs jsonb ) server stripe_server options ( object 'mandates' ); While any column is allowed in a where clause, it is most efficient to filter by: id","title":"Mandates"},{"location":"stripe/#payment-intents","text":"read only A payment intent guides you through the process of collecting a payment from your customer. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . payment_intents ( id text , customer text , amount bigint , currency text , payment_method text , created timestamp , attrs jsonb ) server stripe_server options ( object 'payment_intents' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer","title":"Payment Intents"},{"location":"stripe/#payouts","text":"read only A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . payouts ( id text , amount bigint , currency text , arrival_date timestamp , description text , statement_descriptor text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'payouts' ); While any column is allowed in a where clause, it is most efficient to filter by: id status","title":"Payouts"},{"location":"stripe/#prices","text":"read only A Price object is needed for all of your products to facilitate multiple currencies and pricing options. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 create foreign table stripe . prices ( id text , active bool , currency text , product text , unit_amount bigint , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'pricing' ); While any column is allowed in a where clause, it is most efficient to filter by: id active","title":"Prices"},{"location":"stripe/#products","text":"read and modify All products available in Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . products ( id text , name text , active bool , default_price text , description text , created timestamp , updated timestamp , attrs jsonb ) server stripe_server options ( object 'products' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id active","title":"Products"},{"location":"stripe/#refunds","text":"read only Refund objects allow you to refund a charge that has previously been created but not yet refunded. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . refunds ( id text , amount bigint , currency text , charge text , payment_intent text , reason text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'refunds' ); While any column is allowed in a where clause, it is most efficient to filter by: id charge payment_intent","title":"Refunds"},{"location":"stripe/#setupattempts","text":"read only A SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation was successful or unsuccessful. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . setup_attempts ( id text , application text , customer text , on_behalf_of text , payment_method text , setup_intent text , status text , usage text , created timestamp , attrs jsonb ) server stripe_server options ( object 'setup_attempts' ); While any column is allowed in a where clause, it is most efficient to filter by: id setup_intent","title":"SetupAttempts"},{"location":"stripe/#setupintents","text":"read only A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . setup_intents ( id text , client_secret text , customer text , description text , payment_method text , status text , usage text , created timestamp , attrs jsonb ) server stripe_server options ( object 'setup_intents' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer payment_method","title":"SetupIntents"},{"location":"stripe/#subscriptions","text":"read and modify Customer recurring payment schedules. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . subscriptions ( id text , customer text , currency text , current_period_start timestamp , current_period_end timestamp , attrs jsonb ) server stripe_server options ( object 'subscriptions' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer price status","title":"Subscriptions"},{"location":"stripe/#tokens","text":"read only Tokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table stripe . tokens ( id text , customer text , currency text , current_period_start timestamp , current_period_end timestamp , attrs jsonb ) server stripe_server options ( object 'tokens' );","title":"Tokens"},{"location":"stripe/#top-ups","text":"read only To top up your Stripe balance, you create a top-up object. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . topups ( id text , amount bigint , currency text , description text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'topups' ); While any column is allowed in a where clause, it is most efficient to filter by: id status","title":"Top-ups"},{"location":"stripe/#transfers","text":"read only A Transfer object is created when you move funds between Stripe accounts as part of Connect. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . transfers ( id text , amount bigint , currency text , description text , destination text , created timestamp , attrs jsonb ) server stripe_server options ( object 'transfers' ); While any column is allowed in a where clause, it is most efficient to filter by: id destination","title":"Transfers"},{"location":"stripe/#examples","text":"Some examples on how to use Stripe foreign tables.","title":"Examples"},{"location":"stripe/#basic-example","text":"1 2 3 4 -- always limit records to reduce API calls to Stripe select * from stripe . customers limit 10 ; select * from stripe . invoices limit 10 ; select * from stripe . subscriptions limit 10 ;","title":"Basic example"},{"location":"stripe/#query-json-attributes","text":"1 2 3 4 5 6 7 8 9 10 11 -- extract account name for an invoice select id , attrs ->> 'account_name' as account_name from stripe . invoices where id = 'in_xxx' ; -- extract invoice line items for an invoice select id , attrs #> '{lines,data}' as line_items from stripe . invoices where id = 'in_xxx' ; -- extract subscription items for a subscription select id , attrs #> '{items,data}' as items from stripe . subscriptions where id = 'sub_xxx' ;","title":"Query JSON attributes"},{"location":"stripe/#data-modify","text":"1 2 3 4 insert into stripe . customers ( email , name , description ) values ( 'test@test.com' , 'test name' , null ); update stripe . customers set description = 'hello fdw' where id = 'cus_xxx' ; update stripe . customers set attrs = '{\"metadata[foo]\": \"bar\"}' where id = 'cus_xxx' ; delete from stripe . customers where id = 'cus_xxx' ;","title":"Data modify"}]}