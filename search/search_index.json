{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>supabase/wrappers</code>","text":"<p>Documentation: https://supabase.github.io/wrappers</p> <p>Source Code: https://github.com/supabase/wrappers</p>"},{"location":"#overview","title":"Overview","text":"<p><code>supabase/wrappers</code> is a PostgreSQL extension that provides integrations with external sources so you can interact with third-party data using SQL.</p> <p>For example, the Stripe wrapper allows you to query and join against your Stripe customer data straight from PostgreSQL:</p> <pre><code>select\ncustomer_id\ncurrency\nfrom\nstripe.customers;\n</code></pre> <p>returns</p> <pre><code>    customer_id     | currency\n--------------------+-----------\n cus_MJiBtCqOF1Bb3F | usd\n(1 row)\n</code></pre> <p>Currently <code>supabase/wrappers</code> supports:</p> Integration Select Insert Update Delete Truncate Airtable \u2705 \u274c \u274c \u274c \u274c BigQuery \u2705 \u2705 \u2705 \u2705 \u274c ClickHouse \u2705 \u2705 \u2705 \u2705 \u274c Firebase \u2705 \u274c \u274c \u274c \u274c Logflare \u2705 \u274c \u274c \u274c \u274c Notion \u2705 \u274c \u274c \u274c \u274c Redis \u2705 \u274c \u274c \u274c \u274c S3 \u2705 \u274c \u274c \u274c \u274c Stripe \u2705 \u2705 \u2705 \u2705 \u274c SQL Server \u2705 \u274c \u274c \u274c \u274c <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"airtable/","title":"Airtable","text":"<p>Airtable is an easy-to-use online platform for creating and sharing relational databases.</p> <p>The Airtable Wrapper allows you to read data from your Airtable bases/tables within your Postgres database.</p> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"airtable/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>create extension if not exists wrappers with schema extensions;\n</code></pre> <p>and then create the foreign data wrapper:</p> <pre><code>create foreign data wrapper airtable_wrapper\nhandler airtable_fdw_handler\nvalidator airtable_fdw_validator;\n</code></pre>"},{"location":"airtable/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials inide <code>pg_catalog.pg_foreign_server</code> in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault, which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials.</p> <pre><code>-- Save your Airtable API key in Vault and retrieve the `key_id`\ninsert into vault.secrets (name, secret)\nvalues (\n'airtable',\n'&lt;Airtable API Key or PAT&gt;' -- Airtable API key or Personal Access Token (PAT)\n)\nreturning key_id;\n</code></pre>"},{"location":"airtable/#connecting-to-airtable","title":"Connecting to Airtable","text":"<p>We need to provide Postgres with the credentials to connect to Airtable, and any additional options. We can do this using the <code>create server</code> command:</p> With VaultWithout Vault <pre><code>create server airtable_server\nforeign data wrapper airtable_wrapper\noptions (\napi_key_id '&lt;key_ID&gt;' -- The Key ID from above.\n);\n</code></pre> <pre><code>create server airtable_server\nforeign data wrapper airtable_wrapper\noptions (\napi_url 'https://api.airtable.com/v0',  -- Airtable API url, optional\napi_key '&lt;Airtable API Key or PAT&gt;'  -- Airtable API key or Personal Access Token (PAT), required\n);\n</code></pre>"},{"location":"airtable/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The Airtable Wrapper supports data reads from Airtable's Records endpoint (read only).</p> Airtable Select Insert Update Delete Truncate Records \u2705 \u274c \u274c \u274c \u274c <p>For example:</p> <pre><code>create foreign table my_foreign_table (\nname text\n-- other fields\n)\nserver airtable_server\noptions (\nbase_id 'appXXXX',\ntable_id 'tblXXXX'\n);\n</code></pre>"},{"location":"airtable/#foreign-table-options","title":"Foreign table options","text":"<p>The full list of foreign table options are below:</p> <ul> <li><code>base_id</code> - Airtable Base ID the table belongs to, required.</li> <li><code>table_id</code> - Airtable table ID, required.</li> <li><code>view_id</code> - Airtable view ID, optional.</li> </ul>"},{"location":"airtable/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW doesn't support query pushdown.</p>"},{"location":"airtable/#examples","title":"Examples","text":"<p>Some examples on how to use Airtable foreign tables.</p>"},{"location":"airtable/#basic-example","title":"Basic example","text":"<p>This will create a \"foreign table\" inside your Postgres database called <code>airtable_table</code>:</p> <pre><code>create foreign table airtable_table (\nname text,\nnotes text,\ncontent text,\namount numeric,\nupdated_at timestamp\n)\nserver airtable_server\noptions (\nbase_id 'appTc3yI68KN6ukZc',\ntable_id 'tbltiLinE56l3YKfn'\n);\n</code></pre> <p>You can now fetch your Airtable data from within your Postgres database:</p> <pre><code>select * from airtable_table;\n</code></pre> <p>We can also create a foreign table from an Airtable View called <code>airtable_view</code>:</p> <pre><code>create foreign table airtable_view (\nname text,\nnotes text,\ncontent text,\namount numeric,\nupdated_at timestamp\n)\nserver airtable_server\noptions (\nbase_id 'appTc3yI68KN6ukZc',\ntable_id 'tbltiLinE56l3YKfn',\nview_id 'viwY8si0zcEzw3ntZ'\n);\n\nselect * from airtable_view;\n</code></pre>"},{"location":"auth0/","title":"Auth0 is a flexible, drop-in solution to add authentication and authorization services to your applications","text":"<p>The Auth0 Wrapper allows you to read data from your Auth0 tenant for use within your Postgres database.</p> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"auth0/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>create extension if not exists wrappers with schema extensions;\n</code></pre> <p>and then create the foreign data wrapper:</p> <pre><code>create foreign data wrapper auth0_wrapper\nhandler auth0_fdw_handler\nvalidator auth0_fdw_validator;\n</code></pre>"},{"location":"auth0/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials inide <code>pg_catalog.pg_foreign_server</code> in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault, which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials.</p> <pre><code>-- Save your Auth0 API key in Vault and retrieve the `key_id`\ninsert into vault.secrets (name, secret)\nvalues (\n'auth0',\n'&lt;Auth0 API Key or PAT&gt;' -- Auth0 API key or Personal Access Token (PAT)\n)\nreturning key_id;\n</code></pre>"},{"location":"auth0/#connecting-to-auth0","title":"Connecting to Auth0","text":"<p>We need to provide Postgres with the credentials to connect to Airtable, and any additional options. We can do this using the <code>create server</code> command:</p> With VaultWithout Vault <pre><code>create server auth0_server\nforeign data wrapper auth0_wrapper\noptions (\napi_key_id '&lt;key_ID&gt;' -- The Key ID from above.\n);\n</code></pre> <pre><code>-- create server and specify custom options\ncreate server auth0_server\nforeign data wrapper auth0_wrapper\noptions (\nurl 'https://dev-&lt;tenant-id&gt;.us.auth0.com/api/v2/users',\napi_key '&lt;your_api_key&gt;'\n);\n</code></pre>"},{"location":"auth0/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The Auth0 Wrapper supports data reads from Auth0's Management API List users endpoint endpoint (read only).</p> Auth0 Select Insert Update Delete Truncate Records \u2705 \u274c \u274c \u274c \u274c <p>For example:</p> <pre><code>create foreign table my_foreign_table (\nname text\n-- other fields\n)\nserver auth0_server\noptions (\nobject 'users',\n);\n</code></pre>"},{"location":"auth0/#foreign-table-options","title":"Foreign table options","text":"<p>The full list of foreign table options are below:</p> <ul> <li><code>objects</code> - Auth0 object to select from. Currently only supports <code>users</code></li> </ul>"},{"location":"auth0/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW doesn't support query pushdown.</p>"},{"location":"auth0/#examples","title":"Examples","text":"<p>Some examples on how to use Auth0 foreign tables.</p>"},{"location":"auth0/#basic-example","title":"Basic example","text":"<p>This will create a \"foreign table\" inside your Postgres database called <code>auth0_table</code>:</p> <pre><code>create foreign table auth0_table (\ncreated_at text,\nemail text,\nemail_verified bool,\nidentities jsonb\n)\nserver auth0_server\noptions (\nobject 'users'\n);\n</code></pre> <p>You can now fetch your Auth0 data from within your Postgres database:</p> <pre><code>select * from auth0;\n</code></pre>"},{"location":"bigquery/","title":"BigQuery","text":"<p>BigQuery is a completely serverless and cost-effective enterprise data warehouse that works across clouds and scales with your data, with BI, machine learning and AI built in.</p> <p>The BigQuery Wrapper allows you to read and write data from BigQuery within your Postgres database.</p> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"bigquery/#supported-data-types","title":"Supported Data Types","text":"Postgres Type BigQuery Type boolean BOOL bigint INT64 double precision FLOAT64 numeric NUMERIC text STRING varchar STRING date DATE timestamp DATETIME timestamp TIMESTAMP timestamptz TIMESTAMP"},{"location":"bigquery/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>create extension if not exists wrappers with schema extensions;\n</code></pre> <p>and then create the foreign data wrapper:</p> <pre><code>create foreign data wrapper bigquery_wrapper\nhandler big_query_fdw_handler\nvalidator big_query_fdw_validator;\n</code></pre>"},{"location":"bigquery/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials inide <code>pg_catalog.pg_foreign_server</code> in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault, which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials.</p> <pre><code>-- Save your BigQuery service account json in Vault and retrieve the `key_id`\ninsert into vault.secrets (name, secret)\nvalues (\n'bigquery',\n'\n    {\n      \"type\": \"service_account\",\n      \"project_id\": \"your_gcp_project_id\",\n      \"private_key_id\": \"your_private_key_id\",\n      \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\",\n      ...\n    }\n  '\n)\nreturning key_id;\n</code></pre>"},{"location":"bigquery/#connecting-to-bigquery","title":"Connecting to BigQuery","text":"<p>We need to provide Postgres with the credentials to connect to BigQuery, and any additional options. We can do this using the <code>create server</code> command:</p> With VaultWithout Vault <pre><code>create server bigquery_server\nforeign data wrapper bigquery_wrapper\noptions (\nsa_key_id '&lt;key_ID&gt;', -- The Key ID from above.\nproject_id 'your_gcp_project_id',\ndataset_id 'your_gcp_dataset_id'\n);\n</code></pre> <pre><code>create server bigquery_server\nforeign data wrapper bigquery_wrapper\noptions (\nsa_key '\n    {\n       \"type\": \"service_account\",\n       \"project_id\": \"your_gcp_project_id\",\n       ...\n    }\n   ',\nproject_id 'your_gcp_project_id',\ndataset_id 'your_gcp_dataset_id'\n);\n</code></pre>"},{"location":"bigquery/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The BigQuery Wrapper supports data reads and writes from BigQuery.</p> Integration Select Insert Update Delete Truncate BigQuery \u2705 \u2705 \u2705 \u2705 \u274c <p>For example:</p> <pre><code>create foreign table my_bigquery_table (\nid bigint,\nname text,\nts timestamp\n)\nserver bigquery_server\noptions (\ntable 'people',\nlocation 'EU'\n);\n</code></pre>"},{"location":"bigquery/#foreign-table-options","title":"Foreign table options","text":"<p>The full list of foreign table options are below:</p> <ul> <li><code>table</code> - Source table or view name in BigQuery, required.</li> </ul> <p>This can also be a subquery enclosed in parentheses, for example,</p> <pre><code>table '(select * except(props), to_json_string(props) as props from `my_project.my_dataset.my_table`)'\n</code></pre> <p>Note: When using subquery in this option, full qualitified table name must be used.</p> <ul> <li><code>location</code> - Source table location, optional. Default is 'US'.</li> <li><code>timeout</code> - Query request timeout in milliseconds, optional. Default is '30000' (30 seconds).</li> <li><code>rowid_column</code> - Primary key column name, optional for data scan, required for data modify</li> </ul>"},{"location":"bigquery/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW supports <code>where</code>, <code>order by</code> and <code>limit</code> clause pushdown.</p>"},{"location":"bigquery/#inserting-rows-the-streaming-buffer","title":"Inserting Rows &amp; the Streaming Buffer","text":"<p>This foreign data wrapper uses BigQuery\u2019s <code>insertAll</code> API method to create a <code>streamingBuffer</code> with an associated partition time. Within that partition time, the data cannot be updated, deleted, or fully exported. Only after the time has elapsed (up to 90 minutes according to BigQuery\u2019s documentation); can you perform operations.</p> <p>If you attempt an <code>UPDATE</code> or <code>DELETE</code> statement on rows while in the streamingBuffer, you will get an error of <code>UPDATE</code> or <code>DELETE</code> statement over table datasetName - note that tableName would affect rows in the streaming buffer, which is not supported.</p>"},{"location":"bigquery/#examples","title":"Examples","text":"<p>Some examples on how to use BigQuery foreign tables.</p> <p>Let's prepare the source table in BigQuery first:</p> <pre><code>-- Run below SQLs on BigQuery to create source table\ncreate table your_project_id.your_dataset_id.people (\nid int64,\nname string,\nts timestamp\n);\n\n-- Add some test data\ninsert into your_project_id.your_dataset_id.people values\n(1, 'Luke Skywalker', current_timestamp()),\n(2, 'Leia Organa', current_timestamp()),\n(3, 'Han Solo', current_timestamp());\n</code></pre>"},{"location":"bigquery/#basic-example","title":"Basic example","text":"<p>This example will create a \"foreign table\" inside your Postgres database called <code>people</code> and query its data:</p> <pre><code>create foreign table people (\nid bigint,\nname text,\nts timestamp\n)\nserver bigquery_server\noptions (\ntable 'people',\nlocation 'EU'\n);\n\nselect * from people;\n</code></pre>"},{"location":"bigquery/#data-modify-example","title":"Data modify example","text":"<p>This example will modify data in a \"foreign table\" inside your Postgres database called <code>people</code>, note that <code>rowid_column</code> option is mandatory:</p> <pre><code>create foreign table people (\nid bigint,\nname text,\nts timestamp\n)\nserver bigquery_server\noptions (\ntable 'people',\nlocation 'EU',\nrowid_column 'id'\n);\n\n-- insert new data\ninsert into people(id, name, ts)\nvalues (4, 'Yoda', '2023-01-01 12:34:56');\n\n-- update existing data\nupdate people\nset name = 'Anakin Skywalker'\nwhere id = 1;\n\n-- delete data\ndelete from people\nwhere id = 2;\n</code></pre>"},{"location":"clickhouse/","title":"ClickHouse","text":"<p>ClickHouse is a fast open-source column-oriented database management system that allows generating analytical data reports in real-time using SQL queries.</p> <p>The ClickHouse Wrapper allows you to read and write data from ClickHouse within your Postgres database.</p> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"clickhouse/#supported-data-types","title":"Supported Data Types","text":"Postgres Type ClickHouse Type boolean UInt8 smallint Int16 integer UInt16 integer Int32 bigint UInt32 bigint Int64 bigint UInt64 real Float32 double precision Float64 text String date Date timestamp DateTime"},{"location":"clickhouse/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>create extension if not exists wrappers with schema extensions;\n</code></pre> <p>and then create the foreign data wrapper:</p> <pre><code>create foreign data wrapper clickhouse_wrapper\nhandler click_house_fdw_handler\nvalidator click_house_fdw_validator;\n</code></pre>"},{"location":"clickhouse/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials inide <code>pg_catalog.pg_foreign_server</code> in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault, which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials.</p> <pre><code>-- Save your ClickHouse credential in Vault and retrieve the `key_id`\ninsert into vault.secrets (name, secret)\nvalues (\n'clickhouse',\n'tcp://default:@localhost:9000/default'\n)\nreturning key_id;\n</code></pre>"},{"location":"clickhouse/#connecting-to-clickhouse","title":"Connecting to ClickHouse","text":"<p>We need to provide Postgres with the credentials to connect to ClickHouse, and any additional options. We can do this using the <code>create server</code> command:</p> With VaultWithout Vault <pre><code>create server clickhouse_server\nforeign data wrapper clickhouse_wrapper\noptions (\nconn_string_id '&lt;key_ID&gt;' -- The Key ID from above.\n);\n</code></pre> <pre><code>create server clickhouse_server\nforeign data wrapper clickhouse_wrapper\noptions (\nconn_string 'tcp://default:@localhost:9000/default'\n);\n</code></pre> <p>Some connection string examples:</p> <ul> <li><code>tcp://user:password@host:9000/clicks?compression=lz4&amp;ping_timeout=42ms</code></li> <li><code>tcp://default:PASSWORD@abc.eu-west-1.aws.clickhouse.cloud:9440/default?connection_timeout=30s&amp;ping_before_query=false&amp;secure=true</code></li> </ul> <p>Check more connection string parameters.</p>"},{"location":"clickhouse/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The ClickHouse Wrapper supports data reads and writes from ClickHouse.</p> Integration Select Insert Update Delete Truncate ClickHouse \u2705 \u2705 \u2705 \u2705 \u274c <p>For example:</p> <pre><code>create foreign table my_clickhouse_table (\nid bigint,\nname text\n)\nserver clickhouse_server\noptions (\ntable 'people'\n);\n</code></pre>"},{"location":"clickhouse/#foreign-table-options","title":"Foreign table options","text":"<p>The full list of foreign table options are below:</p> <ul> <li><code>table</code> - Source table name in ClickHouse, required.</li> </ul> <p>This can also be a subquery enclosed in parentheses, for example,</p> <pre><code>table '(select * from my_table)'\n</code></pre> <p>Parametrized view is also supported in the subquery. In this case, you need to define a column for each parameter and use <code>where</code> to pass values to them. For example,</p> <pre><code> create foreign table test_vw (\nid bigint,\ncol1 text,\ncol2 bigint,\n_param1 text,\n_param2 bigint\n)\nserver clickhouse_server\noptions (\ntable '(select * from my_view(column1=${_param1}, column2=${_param2}))'\n);\n\nselect * from test_vw where _param1='aaa' and _param2=32;\n</code></pre> <ul> <li><code>rowid_column</code> - Primary key column name, optional for data scan, required for data modify</li> </ul>"},{"location":"clickhouse/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW supports <code>where</code>, <code>order by</code> and <code>limit</code> clause pushdown, as well as parametrized view (see above).</p>"},{"location":"clickhouse/#examples","title":"Examples","text":"<p>Some examples on how to use ClickHouse foreign tables.</p>"},{"location":"clickhouse/#basic-example","title":"Basic example","text":"<p>This will create a \"foreign table\" inside your Postgres database called <code>people</code>:</p> <pre><code>-- Run below SQLs on ClickHouse to create source table\ndrop table if exists people;\ncreate table people (\nid Int64,\nname String\n)\nengine=MergeTree()\norder by id;\n\n-- Add some test data\ninsert into people values (1, 'Luke Skywalker'), (2, 'Leia Organa'), (3, 'Han Solo');\n</code></pre> <p>Create foreign table on Postgres database:</p> <pre><code>create foreign table people (\nid bigint,\nname text\n)\nserver clickhouse_server\noptions (\ntable 'people'\n);\n\n-- data scan\nselect * from people;\n\n-- data modify\ninsert into people values (4, 'Yoda');\nupdate people set name = 'Princess Leia' where id = 2;\ndelete from people where id = 3;\n</code></pre>"},{"location":"cognito/","title":"AWS Cognito","text":"<p>AWS Cognito is an identity platform for web and mobile apps. </p> <p>The Cognito wrapper allows you to read data from your Cognito Userpool within your Postgres database.</p> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"cognito/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>create extension if not exists wrappers with schema extensions;\n</code></pre> <p>and then create the foreign data wrapper:</p> <pre><code>create foreign data wrapper cognito_wrapper\nhandler cognito_fdw_handler\nvalidator cognito_fdw_validator;\n</code></pre>"},{"location":"cognito/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials inide <code>pg_catalog.pg_foreign_server</code> in plain text. Anyone with access to this table will be able to view these credentials. Wrappers are designed to work with Vault, which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials.</p> <pre><code>insert into vault.secrets (name, secret)\nvalues (\n'cognito_secret_access_key',\n'&lt;secret access key&gt;'\n)\nreturning key_id;\n</code></pre>"},{"location":"cognito/#connecting-to-cognito","title":"Connecting to Cognito","text":"<p>We need to provide Postgres with the credentials to connect to Cognito, and any additional options. We can do this using the <code>create server</code> command:</p> With VaultWithout Vault <pre><code>create server cognito_server\nforeign data wrapper cognito_wrapper\noptions (\naws_access_key_id '&lt;your_access_key&gt;',\napi_key_id '&lt;your_secret_key_id_in_vault&gt;',\nregion '&lt;your_aws_region&gt;',\nuser_pool_id '&lt;your_user_pool_id&gt;'\n);\n</code></pre> <pre><code>create server cognito_server\nforeign data wrapper cognito_wrapper\noptions (\naws_access_key_id '&lt;your_access_key&gt;',\naws_secret_access_key '&lt;your_secret_key&gt;',\nregion '&lt;your_aws_region&gt;',\nuser_pool_id '&lt;your_user_pool_id&gt;'\n);\n</code></pre>"},{"location":"cognito/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The Cognito Wrapper supports data reads from Cognito's User Records endpoint (read only).</p> Cognito Select Insert Update Delete Truncate Records \u2705 \u274c \u274c \u274c \u274c <p>For example:</p> <pre><code>create foreign table cognito (\nemail text,\nusername text\n)\nserver cognito_server\noptions (\nobject 'users'\n);\n</code></pre>"},{"location":"cognito/#foreign-table-options","title":"Foreign table options","text":"<p>The full list of foreign table options are below:</p> <ul> <li><code>object</code>: type of object we are querying. For now, only <code>users</code> is supported</li> </ul>"},{"location":"cognito/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW doesn't support query pushdown.</p>"},{"location":"cognito/#examples","title":"Examples","text":"<p>Some examples on how to use Cognito foreign tables.</p>"},{"location":"cognito/#basic-example","title":"Basic example","text":"<p>This will create a \"foreign table\" inside your Postgres database called <code>cognito_table</code>:</p> <pre><code>create foreign table cognito_table (\nemail text,\nusername text\n)\nserver cognito_server\noptions (\nobject 'users'\n);\n</code></pre> <p>You can now fetch your Cognito data from within your Postgres database:</p> <pre><code>select * from cognito_table;\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p><code>supabase/wrappers</code> is OSS. PRs and issues are welcome.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>Requirements:</p> <ul> <li>rust</li> <li>cargo</li> <li>docker-compose</li> <li>pgrx</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Tests are located in <code>./test/sql</code> with expected output in <code>./test/expected</code></p> <p>To run tests locally, execute:</p> <pre><code>cd wrappers\ndocker-compose -f .ci/docker-compose.yaml run test-wrappers </code></pre>"},{"location":"contributing/#interactive-psql-development","title":"Interactive PSQL Development","text":"<p>To reduce the iteration cycle, you may want to launch a psql prompt with <code>wrappers</code> installed to experiment</p> <pre><code>cd wrappers\ncargo pgrx run pg14 --features clickhouse_fdw\n</code></pre> <p>Try out the commands below to spin up a database with the extension installed &amp; query a table using GraphQL. Experiment with aliasing field/table names and filtering on different columns.</p> <pre><code>&gt; create extension wrappers cascade;\nCREATE EXTENSION\n</code></pre> <p>For debugging, you can make use of <code>notice!</code> macros to print out statements while using your wrapper in <code>psql</code>.</p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>All public API must be documented. Building documentation requires python 3.6+</p>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Install mkdocs, themes, and extensions.</p> <pre><code>pip install -r docs/requirements_docs.txt\n</code></pre>"},{"location":"contributing/#serving","title":"Serving","text":"<p>To serve the documentation locally run</p> <pre><code>mkdocs serve\n</code></pre> <p>and visit the docs at http://127.0.0.1:8000/wrappers/</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>If you have write access to the repo, docs can be updated using</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"contributing/#community-wrappers","title":"Community Wrappers","text":"<p>Unfortunately, we cannot support community Wrappers inside the Supabase Dashboard until the Wrappers API is stabilized. You can vote your favorite Wrapper if you'd like it to be added to Supabase in the future.</p> <p>If you have developed a Wrapper that you want inside the Supabase Dashboard, please contribute it as a PR in this repo.</p> <p>Once we release Wrappers 1.0, we will support community Wrappers within the Supabase Dashboard.</p>"},{"location":"firebase/","title":"Firebase","text":"<p>Firebase is an app development platform built around non-relational technologies. The Firebase Wrapper supports connecting to below objects.</p> <ol> <li>Authentication Users (read only)</li> <li>Firestore Database Documents (read only)</li> </ol> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"firebase/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>create extension if not exists wrappers with schema extensions;\n</code></pre> <p>and then create the foreign data wrapper:</p> <pre><code>create foreign data wrapper firebase_wrapper\nhandler firebase_fdw_handler\nvalidator firebase_fdw_validator;\n</code></pre>"},{"location":"firebase/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials inide <code>pg_catalog.pg_foreign_server</code> in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault, which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials.</p> <pre><code>-- Save your Firebase credentials in Vault and retrieve the `key_id`\ninsert into vault.secrets (name, secret)\nvalues (\n'firebase',\n'{\n      \"type\": \"service_account\",\n      \"project_id\": \"your_gcp_project_id\",\n      ...\n  }'\n)\nreturning key_id;\n</code></pre>"},{"location":"firebase/#connecting-to-firebase","title":"Connecting to Firebase","text":"<p>We need to provide Postgres with the credentials to connect to Firebase, and any additional options. We can do this using the <code>create server</code> command:</p> With VaultWithout Vault <pre><code>create server firebase_server\nforeign data wrapper firebase_wrapper\noptions (\nsa_key_id '&lt;key_ID&gt;', -- The Key ID from above.\nproject_id '&lt;firebase_project_id&gt;'\n);\n</code></pre> <pre><code>create server firebase_server\nforeign data wrapper firebase_wrapper\noptions (\nsa_key '\n     {\n        \"type\": \"service_account\",\n        \"project_id\": \"your_gcp_project_id\",\n        ...\n     }\n    ',\nproject_id 'firebase_project_id'\n);\n</code></pre>"},{"location":"firebase/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The Firebase Wrapper supports reading data from below Firebase's objects:</p> Firebase Select Insert Update Delete Truncate Authentication Users \u2705 \u274c \u274c \u274c \u274c Firestore Database Documents \u2705 \u274c \u274c \u274c \u274c <p>For example:</p> <pre><code>create foreign table firebase_users (\nuid text,\nemail text,\ncreated_at timestamp,\nattrs jsonb\n)\nserver firebase_server\noptions (\nobject 'auth/users'\n);\n</code></pre> <p>Note there is a meta column <code>attrs</code> in the foreign table, which contains all the returned data from Firebase as json format.</p>"},{"location":"firebase/#foreign-table-options","title":"Foreign table options","text":"<p>The full list of foreign table options are below:</p> <ul> <li><code>object</code> - Object name in Firebase, required.</li> </ul> <p>For Authenciation users, the object name is fixed to <code>auth/users</code>. For Firestore documents, its format is <code>firestore/&lt;collection_id&gt;</code>, note that collection id must be a full path id. For example,</p> <ul> <li><code>firestore/my-collection</code></li> <li><code>firestore/my-collection/my-document/another-collection</code></li> </ul>"},{"location":"firebase/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW doesn't support query pushdown.</p>"},{"location":"firebase/#examples","title":"Examples","text":"<p>Some examples on how to use Firebase foreign tables.</p>"},{"location":"firebase/#firestore","title":"firestore","text":"<p>To map a Firestore collection provide its location using the format <code>firestore/&lt;collection_id&gt;</code> as the <code>object</code> option as shown below.</p> <pre><code>create foreign table firebase_docs (\nname text,\ncreated_at timestamp,\nupdated_at timestamp,\nattrs jsonb\n)\nserver firebase_server\noptions (\nobject 'firestore/user-profiles'\n);\n</code></pre> <p>Note that <code>name</code>, <code>created_at</code>, and <code>updated_at</code>, are automatic metadata fields on all Firestore collections.</p>"},{"location":"firebase/#authusers","title":"auth/users","text":"<p>The <code>auth/users</code> collection is a special case with unique metadata. The following shows how to map Firebase users to PostgreSQL table.</p> <pre><code>create foreign table firebase_users (\nuid text,\nemail text,\ncreated_at timestamp,\nattrs jsonb\n)\nserver firebase_server\noptions (\nobject 'auth/users'\n);\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>First, install pgrx</p> <p>Then clone the repo and install using</p> <pre><code>git clone https://github.com/supabase/wrappers.git\ncd wrappers/wrappers \ncargo pgrx install --no-default-features --features pg14,&lt;some_integration&gt;_fdw --release\n</code></pre> <p>To enable the extension in PostgreSQL we must execute a <code>create extension</code> statement.</p> <pre><code>create extension wrappers;\n</code></pre>"},{"location":"logflare/","title":"Logflare","text":"<p>Logflare is a centralized web-based log management solution to easily access Cloudflare, Vercel &amp; Elixir logs.</p> <p>The Logflare Wrapper allows you to read data from Logflare endpoints within your Postgres database.</p> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"logflare/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>create extension if not exists wrappers with schema extensions;\n</code></pre> <p>and then create the foreign data wrapper:</p> <pre><code>create foreign data wrapper logflare_wrapper\nhandler logflare_fdw_handler\nvalidator logflare_fdw_validator;\n</code></pre>"},{"location":"logflare/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials inide <code>pg_catalog.pg_foreign_server</code> in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault, which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials.</p> <pre><code>-- Save your Logflare API key in Vault and retrieve the `key_id`\ninsert into vault.secrets (name, secret)\nvalues (\n'logflare',\n'YOUR_SECRET'\n)\nreturning key_id;\n</code></pre>"},{"location":"logflare/#connecting-to-logflare","title":"Connecting to Logflare","text":"<p>We need to provide Postgres with the credentials to connect to Logflare, and any additional options. We can do this using the <code>create server</code> command:</p> With VaultWithout Vault <pre><code>create server logflare_server\nforeign data wrapper logflare_wrapper\noptions (\napi_key_id '&lt;key_ID&gt;' -- The Key ID from above.\n);\n</code></pre> <pre><code>create server logflare_server\nforeign data wrapper logflare_wrapper\noptions (\napi_key '&lt;Logflare API Key&gt;' -- Logflare API key, required\n);\n</code></pre>"},{"location":"logflare/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The Logflare Wrapper supports data reads from Logflare's endpoints.</p> Integration Select Insert Update Delete Truncate Logflare \u2705 \u274c \u274c \u274c \u274c <p>For example:</p> <pre><code>create foreign table my_logflare_table (\nid bigint,\nname text,\n_result text\n)\nserver logflare_server\noptions (\nendpoint '9dd9a6f6-8e9b-4fa4-b682-4f2f5cd99da3'\n);\n</code></pre>"},{"location":"logflare/#meta-column","title":"Meta column","text":"<p>You can define a specific meta column <code>_result</code> (data type: <code>text</code>) in the foreign table. It will store the whole result record in JSON string format, so you can extract any fields from it using Postgres JSON queries like <code>_result::json-&gt;&gt;'foo'</code>. See more examples below.</p>"},{"location":"logflare/#query-parameters","title":"Query parameters","text":"<p>Logflare endpoint query parameters can be passed using specific parameter columns like <code>_param_foo</code> and <code>_param_bar</code>. See more examples below.</p>"},{"location":"logflare/#foreign-table-options","title":"Foreign table options","text":"<p>The full list of foreign table options are below:</p> <ul> <li><code>endpoint</code> - Logflare endpoint UUID or name, required.</li> </ul>"},{"location":"logflare/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW doesn't support query pushdown.</p>"},{"location":"logflare/#examples","title":"Examples","text":"<p>Some examples on how to use Logflare foreign tables.</p>"},{"location":"logflare/#basic-example","title":"Basic example","text":"<p>Assume the Logflare endpoint response is like below:</p> <pre><code>[\n{\n\"id\": 123,\n\"name\": \"foo\"\n}\n]\n</code></pre> <p>Then we can define a foreign table like this:</p> <pre><code>create foreign table people (\nid bigint,\nname text,\n_result text\n)\nserver logflare_server\noptions (\nendpoint '9dd9a6f6-8e9b-4fa4-b682-4f2f5cd99da3'\n);\n\nselect * from people;\n</code></pre>"},{"location":"logflare/#query-parameters-example","title":"Query parameters example","text":"<p>Suppose the Logflare endpoint accepts 3 parameters:</p> <ol> <li>org_id</li> <li>iso_timestamp_start</li> <li>iso_timestamp_end</li> </ol> <p>And its response is like below:</p> <pre><code>[\n{\n\"db_size\": \"large\",\n\"org_id\": \"123\",\n\"runtime_hours\": 21.95,\n\"runtime_minutes\": 1317\n}\n]\n</code></pre> <p>We can define a foreign table and parameter columns like this:</p> <pre><code>create foreign table runtime_hours (\ndb_size text,\norg_id text,\nruntime_hours numeric,\nruntime_minutes bigint,\n_param_org_id bigint,\n_param_iso_timestamp_start text,\n_param_iso_timestamp_end text,\n_result text\n)\nserver logflare_server\noptions (\nendpoint 'my.custom.endpoint'\n);\n</code></pre> <p>and query it with parameters like this:</p> <pre><code>select\ndb_size,\norg_id,\nruntime_hours,\nruntime_minutes\nfrom\nruntime_hours\nwhere _param_org_id = 123\nand _param_iso_timestamp_start = '2023-07-01 02:03:04'\nand _param_iso_timestamp_end = '2023-07-02';\n</code></pre>"},{"location":"mssql/","title":"SQL Server","text":"<p>Microsoft SQL Server is a proprietary relational database management system developed by Microsoft.</p> <p>The SQL Server Wrapper allows you to read data from Microsoft SQL Server within your Postgres database.</p> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"mssql/#supported-data-types","title":"Supported Data Types","text":"Postgres Type SQL Server Type boolean bit char tinyint smallint smallint real float(24) integer int double precision float(53) bigint bigint numeric numeric/decimal text varchar/char/text date date timestamp datetime/datetime2/smalldatetime timestamptz datetime/datetime2/smalldatetime"},{"location":"mssql/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>create extension if not exists wrappers with schema extensions;\n</code></pre> <p>and then create the foreign data wrapper:</p> <pre><code>create foreign data wrapper mssql_wrapper\nhandler mssql_fdw_handler\nvalidator mssql_fdw_validator;\n</code></pre>"},{"location":"mssql/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials inside <code>pg_catalog.pg_foreign_server</code> in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault, which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials.</p> <pre><code>-- Save your SQL Server connection string in Vault and retrieve the `key_id`\ninsert into vault.secrets (name, secret)\nvalues (\n'mssql',\n'Server=localhost,1433;User=sa;Password=my_password;Database=master;IntegratedSecurity=false;TrustServerCertificate=true;encrypt=DANGER_PLAINTEXT;ApplicationName=wrappers'\n)\nreturning key_id;\n</code></pre>"},{"location":"mssql/#connecting-to-sql-server","title":"Connecting to SQL Server","text":"<p>We need to provide Postgres with the credentials to connect to SQL Server. We can do this using the <code>create server</code> command:</p> With VaultWithout Vault <pre><code>create server mssql_server\nforeign data wrapper mssql_wrapper\noptions (\nconn_string_id '&lt;key_ID&gt;' -- The Key ID from above.\n);\n</code></pre> <pre><code>create server mssql_server\nforeign data wrapper mssql_wrapper\noptions (\nconn_string 'Server=localhost,1433;User=sa;Password=my_password;Database=master;IntegratedSecurity=false;TrustServerCertificate=true;encrypt=DANGER_PLAINTEXT;ApplicationName=wrappers'\n);\n</code></pre> <p>The connection string is an ADO.NET connection string, which specifies connection parameters in semicolon-delimited string.</p> <p>Supported parameters</p> <p>All parameter keys are handled case-insensitive.</p> Parameter Allowed Values Description Server <code>&lt;string&gt;</code> The name or network address of the instance of SQL Server to which to connect. Format: <code>host,port</code> User <code>&lt;string&gt;</code> The SQL Server login account. Password <code>&lt;string&gt;</code> The password for the SQL Server account logging on. Database <code>&lt;string&gt;</code> The name of the database. IntegratedSecurity false Windows/Kerberos authentication and SQL authentication. TrustServerCertificate true, false Specifies whether the driver trusts the server certificate when connecting using TLS. Encrypt true, false, DANGER_PLAINTEXT Specifies whether the driver uses TLS to encrypt communication. ApplicationName <code>&lt;string&gt;</code> Sets the application name for the connection."},{"location":"mssql/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The SQL Server Wrapper supports data reads from SQL Server.</p> Integration Select Insert Update Delete Truncate SQL Server \u2705 \u274c \u274c \u274c \u274c <p>For example:</p> <pre><code>create foreign table mssql_users (\nid bigint,\nname text,\ndt timestamp\n)\nserver mssql_server\noptions (\ntable 'users'\n);\n</code></pre>"},{"location":"mssql/#foreign-table-options","title":"Foreign table options","text":"<p>The full list of foreign table options are below:</p> <ul> <li><code>table</code> - Source table or view name in SQL Server, required.</li> </ul> <p>This can also be a subquery enclosed in parentheses, for example,</p> <pre><code>table '(select * from users where id = 42 or id = 43)'\n</code></pre>"},{"location":"mssql/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW supports <code>where</code>, <code>order by</code> and <code>limit</code> clause pushdown.</p>"},{"location":"mssql/#examples","title":"Examples","text":"<p>Some examples on how to use SQL Server foreign tables.</p> <p>Let's prepare the source table in SQL Server first:</p> <pre><code>-- Run below SQLs on SQL Server to create source table\ncreate table users (\nid bigint,\nname varchar(30),\ndt datetime2\n);\n\n-- Add some test data\ninsert into users(id, name, dt) values (42, 'Foo', '2023-12-28');\ninsert into users(id, name, dt) values (43, 'Bar', '2023-12-27');\ninsert into users(id, name, dt) values (44, 'Baz', '2023-12-26');\n</code></pre>"},{"location":"mssql/#basic-example","title":"Basic example","text":"<p>This example will create a foreign table inside your Postgres database and query its data:</p> <pre><code>create foreign table mssql_users (\nid bigint,\nname text,\ndt timestamp\n)\nserver mssql_server\noptions (\ntable 'users'\n);\n\nselect * from mssql_users;\n</code></pre>"},{"location":"mssql/#remote-subquery-example","title":"Remote subquery example","text":"<p>This example will create a foreign table based on a remote subquery and query its data:</p> <pre><code>create foreign table mssql_users_subquery (\nid bigint,\nname text,\ndt timestamp\n)\nserver mssql_server\noptions (\ntable '(select * from users where id = 42 or id = 43)'\n);\n\nselect * from mssql_users_subquery;\n</code></pre>"},{"location":"notion/","title":"Notion provides a versatile, ready-to-use solution for managing your data.","text":"<p>The Notion Wrapper allows you to read data from your Notion workspace for use within your Postgres database. Only the users endpoint is supported at the moment.</p> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"notion/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>CREATE extension IF NOT EXISTS wrappers SCHEMA extensions;\n</code></pre> <p>Then, create the foreign data wrapper:</p> <pre><code>CREATE FOREIGN DATA WRAPPER notion_wrapper\nHANDLER notion_fdw_handler\nVALIDATOR notion_fdw_validator;\n</code></pre>"},{"location":"notion/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials in plain text within the <code>pg_catalog.pg_foreign_server</code> table, making them visible to anyone with access to this table. To enhance security, it is advisable to use Vault for credential storage. Vault integrates seamlessly with Wrappers to provide a secure storage solution for sensitive information. We strongly recommend utilizing Vault to safeguard your credentials.</p> <pre><code>-- Save your Notion API key in Vault and retrieve the `key_id`\nINSERT INTO vault.secrets (name, secret)\nVALUES (\n'notion',\n'&lt;Notion API Key&gt;' -- Notion API key\n)\nRETURNING key_id;\n</code></pre>"},{"location":"notion/#connecting-to-notion","title":"Connecting to Notion","text":"<p>We need to provide Postgres with the credentials to connect to Notion, and any additional options. We can do this using the <code>CREATE SERVER</code> command:</p> <ul> <li>With Vault (recommended)</li> </ul> <pre><code>CREATE SERVER notion_server\nFOREIGN DATA WRAPPER notion_wrapper\nOPTIONS (\napi_key_id '&lt;key_ID&gt;', -- The Key ID from the Vault\nnotion_version '&lt;notion_version&gt;', -- optional, default is '2022-06-28'\napi_url '&lt;api_url&gt;' -- optional, default is 'https://api.notion.com/v1/'\n);\n</code></pre> <ul> <li>Without Vault</li> </ul> <pre><code>CREATE SERVER notion_server\nFOREIGN DATA WRAPPER notion_wrapper\nOPTIONS (\napi_key '&lt;your_api_key&gt;', -- Your Notion API key\nnotion_version '&lt;notion_version&gt;', -- optional, default is '2022-06-28'\napi_url '&lt;api_url&gt;' -- optional, default is 'https://api.notion.com/v1/'\n);\n</code></pre>"},{"location":"notion/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The Notion Wrapper supports data reads from the Notion API.</p> Object Select Insert Update Delete Truncate Users \u2705 \u274c \u274c \u274c \u274c <p>For example:</p> <pre><code>CREATE FOREIGN TABLE my_foreign_table (\nid text,\nname text,\ntype text,\nperson jsonb,\nbot jsonb\n-- other fields\n)\nSERVER notion_server\nOPTIONS (\nobject 'users',\n);\n</code></pre>"},{"location":"notion/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW supports <code>where</code> clause pushdown. You can specify a filter in <code>where</code> clause and it will be passed to Notion API call.</p> <p>For example, this query</p> <pre><code>SELECT * from notion_users where id = 'xxx';\n</code></pre> <p>will be translated Notion API call: <code>https://api.notion.com/v1/users/xxx</code>.</p>"},{"location":"notion/#examples","title":"Examples","text":"<p>Some examples on how to use Notion foreign tables.</p>"},{"location":"notion/#users-foreign-table","title":"Users foreign table","text":"<p>The following command creates a \"foreign table\" in your Postgres database named <code>notion_users</code>:</p> <pre><code>CREATE FOREIGN TABLE notion_users (\nid text,\nname text,\ntype text,\nperson jsonb,\nbot jsonb\n)\nSERVER notion_server\nOPTIONS (\nobject 'users'\n);\n</code></pre> <p>You can now fetch your Notion data from within your Postgres database:</p> <pre><code>SELECT * FROM notion_users;\n</code></pre> <p>You can also query with filters:</p> <pre><code>SELECT * FROM notion_users WHERE id = 'xxx';\n</code></pre>"},{"location":"redis/","title":"Redis","text":"<p>Redis is an open-source in-memory storage, used as a distributed, in-memory key\u2013value database, cache and message broker, with optional durability.</p> <p>The Redis Wrapper allows you to read data from Redis within your Postgres database.</p> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"redis/#supported-redis-data-types","title":"Supported Redis Data Types","text":"<p>All Redis value will be stored as <code>text</code> or <code>jsonb</code> column in Postgres, below are the supported Redis data types:</p> Redis Type Foreign Table Type (src_type) List list Set set Hash hash Sorted Set zset Stream stream Multiple List multi_list Multiple Set multi_set Multiple Hash multi_hash Multiple Sorted Set multi_zset <p>See below for more descriptions for the <code>Multiple *</code> types and <code>src_type</code> foreign table option.</p>"},{"location":"redis/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>create extension if not exists wrappers with schema extensions;\n</code></pre> <p>and then create the foreign data wrapper:</p> <pre><code>create foreign data wrapper redis_wrapper\nhandler redis_fdw_handler\nvalidator redis_fdw_validator;\n</code></pre>"},{"location":"redis/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials inside <code>pg_catalog.pg_foreign_server</code> in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault, which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials.</p> <pre><code>-- Save your Redis connection URL in Vault and retrieve the `key_id`\ninsert into vault.secrets (name, secret)\nvalues (\n'redis_conn_url',\n'redis://username:password@127.0.0.1:6379/db'\n)\nreturning key_id;\n</code></pre>"},{"location":"redis/#connecting-to-redis","title":"Connecting to Redis","text":"<p>We need to provide Postgres with the credentials to connect to Redis. We can do this using the <code>create server</code> command:</p> With VaultWithout Vault <pre><code>create server redis_server\nforeign data wrapper redis_wrapper\noptions (\nconn_url_id '&lt;key_ID&gt;' -- The Key ID from above.\n);\n</code></pre> <pre><code>create server redis_server\nforeign data wrapper redis_wrapper\noptions (\nconn_url 'redis://username:password@127.0.0.1:6379/db'\n);\n</code></pre> <p>The connection URL format is:</p> <pre><code>redis://[&lt;username&gt;][:&lt;password&gt;@]&lt;hostname&gt;[:port][/&lt;db&gt;]\n</code></pre>"},{"location":"redis/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The Redis Wrapper supports data reads from Redis.</p> Integration Select Insert Update Delete Truncate Redis \u2705 \u274c \u274c \u274c \u274c <p>For example:</p> <pre><code>create foreign table redis_list (\nelement text\n)\nserver redis_server\noptions (\nsrc_type 'list',\nsrc_key 'my_list'\n);\n</code></pre> <p>The foreign table columns names and types must be fixed for each source type, as listed below:</p> src_type Column name Column type list, set, zset <code>element</code> text hash <code>key</code> text <code>value</code> text stream <code>id</code> text <code>items</code> jsonb multi_* <code>key</code> text <code>items</code> jsonb <p>See below for the full list of <code>src_type</code> and descriptions.</p>"},{"location":"redis/#foreign-table-options","title":"Foreign table options","text":"<p>The full list of foreign table options are below:</p> <ul> <li><code>src_type</code> - Foreign table source type in Redis, required.</li> </ul> <p>This can be one of below types,</p> Source type Description list Single list set Single set hash Single hash zset Single sorted set stream Stream multi_list Multiple lists, specified by <code>src_key</code> pattern multi_set Multiple sets, specified by <code>src_key</code> pattern multi_hash Multiple hashes, specified by <code>src_key</code> pattern multi_zset Multiple sorted sets, specified by <code>src_key</code> pattern <ul> <li><code>src_key</code> - Source object key in Redis, required.</li> </ul> <p>This key can be a pattern for <code>multi_*</code> type of foreign table. For other types, this key must return exact one value. For example,</p> Source Type <code>src_key</code> examples list, set, hash, zset, stream <code>my_list</code>, <code>list:001</code>, <code>hash_foo</code>, <code>zset:1000</code> and etc. multi_list, multi_set, multi_hash, multi_zset <code>my_list:*</code>, <code>set:*</code>, <code>zset:*</code> and etc."},{"location":"redis/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW doesn't supports pushdown.</p>"},{"location":"redis/#examples","title":"Examples","text":"<p>Some examples on how to use Redis foreign tables.</p> <p>Let's prepare some source data in Redis CLI first:</p> <pre><code>127.0.0.1:6379&gt; RPUSH list foo bar 42\n127.0.0.1:6379&gt; SADD set foo bar 42\n127.0.0.1:6379&gt; HSET hash foo bar baz qux\n127.0.0.1:6379&gt; ZADD zset 30 foo 20 bar 10 baz\n127.0.0.1:6379&gt; XADD stream * foo bar\n127.0.0.1:6379&gt; XADD stream * aa 42 bb 43\n\n127.0.0.1:6379&gt; RPUSH list:100 foo bar\n127.0.0.1:6379&gt; RPUSH list:200 baz\n\n127.0.0.1:6379&gt; SADD set:100 foo\n127.0.0.1:6379&gt; SADD set:200 bar\n\n127.0.0.1:6379&gt; HSET hash:100 foo bar\n127.0.0.1:6379&gt; HSET hash:200 baz qux\n\n127.0.0.1:6379&gt; ZADD zset:100 10 foo 20 bar\n127.0.0.1:6379&gt; ZADD zset:200 40 baz 30 qux\n</code></pre>"},{"location":"redis/#basic-example","title":"Basic example","text":"<p>This example will create foreign tables inside your Postgres database and query their data:</p> <ul> <li>List</li> </ul> <pre><code>create foreign table redis_list (\nelement text\n)\nserver redis_server\noptions (\nsrc_type 'list',\nsrc_key 'list'\n);\n\nselect * from redis_list;\n</code></pre> <p>Query result:   <pre><code> element\n---------\n foo\n bar\n 42\n(3 rows)\n</code></pre></p> <ul> <li>Set</li> </ul> <pre><code>create foreign table redis_set (\nelement text\n)\nserver redis_server\noptions (\nsrc_type 'set',\nsrc_key 'set'\n);\n\nselect * from redis_set;\n</code></pre> <p>Query result:   <pre><code> element\n---------\n 42\n foo\n bar\n(3 rows)\n</code></pre></p> <ul> <li>Hash</li> </ul> <pre><code>create foreign table redis_hash (\nkey text,\nvalue text\n)\nserver redis_server\noptions (\nsrc_type 'hash',\nsrc_key 'hash'\n);\n\nselect * from redis_hash;\n</code></pre> <p>Query result:   <pre><code> key | value\n-----+-------\n foo | bar\n baz | qux\n(2 rows)\n</code></pre></p> <ul> <li>Sorted set</li> </ul> <pre><code>create foreign table redis_zset (\nelement text\n)\nserver redis_server\noptions (\nsrc_type 'zset',\nsrc_key 'zset'\n);\n\nselect * from redis_zset;\n</code></pre> <p>Query result:   <pre><code> element\n---------\n baz\n bar\n foo\n(3 rows)\n</code></pre></p> <ul> <li>Stream</li> </ul> <pre><code>create foreign table redis_stream (\nid text,\nitems jsonb\n)\nserver redis_server\noptions (\nsrc_type 'stream',\nsrc_key 'stream'\n);\n\nselect * from redis_stream;\n</code></pre> <p>Query result:   <pre><code>       id        |          items\n-----------------+--------------------------\n 1704343825989-0 | {\"foo\": \"bar\"}\n 1704343829799-0 | {\"aa\": \"42\", \"bb\": \"43\"}\n(2 rows)\n</code></pre></p>"},{"location":"redis/#query-multiple-objects-example","title":"Query multiple objects example","text":"<p>This example will create several foreign tables using pattern in key and query multiple objects from Redis:</p> <ul> <li>List</li> </ul> <pre><code>create foreign table redis_multi_lists (\nkey text,\nitems jsonb\n)\nserver redis_server\noptions (\nsrc_type 'multi_list',\nsrc_key 'list:*'\n);\n\nselect * from redis_multi_lists;\n</code></pre> <p>Query result:   <pre><code>   key    |     items\n----------+----------------\n list:100 | [\"foo\", \"bar\"]\n list:200 | [\"baz\"]\n(2 rows)\n</code></pre></p> <ul> <li>Set</li> </ul> <pre><code>create foreign table redis_multi_sets (\nkey text,\nitems jsonb\n)\nserver redis_server\noptions (\nsrc_type 'multi_set',\nsrc_key 'set:*'\n);\n\nselect * from redis_multi_sets;\n</code></pre> <p>Query result:   <pre><code>   key   |  items\n---------+---------\n set:100 | [\"foo\"]\n set:200 | [\"bar\"]\n(2 rows)\n</code></pre></p> <ul> <li>Hash</li> </ul> <pre><code>create foreign table redis_multi_hashes (\nkey text,\nitems jsonb\n)\nserver redis_server\noptions (\nsrc_type 'multi_hash',\nsrc_key 'hash:*'\n);\n\nselect * from redis_multi_hashes;\n</code></pre> <p>Query result:   <pre><code>   key    |     items\n----------+----------------\n hash:200 | {\"baz\": \"qux\"}\n hash:100 | {\"foo\": \"bar\"}\n(2 rows)\n</code></pre></p> <ul> <li>Sorted set</li> </ul> <pre><code>create foreign table redis_multi_zsets (\nkey text,\nitems jsonb\n)\nserver redis_server\noptions (\nsrc_type 'multi_zset',\nsrc_key 'zset:*'\n);\n\nselect * from redis_multi_zsets;\n</code></pre> <p>Query result:   <pre><code>   key    |     items\n----------+----------------\n zset:200 | [\"qux\", \"baz\"]\n zset:100 | [\"foo\", \"bar\"]\n(2 rows)\n</code></pre></p>"},{"location":"s3/","title":"S3","text":"<p>AWS S3 is an object storage service offering industry-leading scalability, data availability, security, and performance. It is read-only and supports below file formats:</p> <p>The S3 Wrapper allows you to read data of below formats from S3 within your Postgres database.</p> <ol> <li>CSV - with or without header line</li> <li>JSON Lines</li> <li>Parquet</li> </ol> <p>The S3 Wrapper also supports below compression algorithms:</p> <ol> <li>gzip</li> <li>bzip2</li> <li>xz</li> <li>zlib</li> </ol> <p>Note for CSV and JSONL files: currently all columns in S3 files must be defined in the foreign table and their types must be <code>text</code> type.</p> <p>Note for Parquet files: the whole Parquet file will be loaded into local memory if it is compressed, so keep the file size as small as possible.</p> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"s3/#supported-data-types-for-parquet-file","title":"Supported Data Types For Parquet File","text":"<p>The S3 Wrapper uses Parquet file data types from arrow_array::types, below are their mappings to Postgres data types.</p> Postgres Type Parquet Type boolean BooleanType char Int8Type smallint Int16Type real Float32Type integer Int32Type double precision Float64Type bigint Int64Type numeric Float64Type text ByteArrayType date Date64Type timestamp TimestampNanosecondType timestamptz TimestampNanosecondType"},{"location":"s3/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>create extension if not exists wrappers with schema extensions;\n</code></pre> <p>and then create the foreign data wrapper:</p> <pre><code>create foreign data wrapper s3_wrapper\nhandler s3_fdw_handler\nvalidator s3_fdw_validator;\n</code></pre>"},{"location":"s3/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials inide <code>pg_catalog.pg_foreign_server</code> in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault, which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials.</p> <pre><code>-- Save your AWS credential in Vault and retrieve the `key_id`\ninsert into vault.secrets (name, secret)\nvalues (\n'vault_access_key_id',\n'&lt;access key id&gt;'\n)\nreturning key_id;\n\ninsert into vault.secrets (name, secret)\nvalues (\n'vault_secret_access_key',\n'&lt;secret access key&gt;'\n)\nreturning key_id;\n</code></pre>"},{"location":"s3/#connecting-to-s3","title":"Connecting to S3","text":"<p>We need to provide Postgres with the credentials to connect to S3, and any additional options. We can do this using the <code>create server</code> command:</p> With VaultWithout Vault <pre><code>create server s3_server\nforeign data wrapper s3_wrapper\noptions (\nvault_access_key_id '&lt;your vault_access_key_id from above&gt;',\nvault_secret_access_key '&lt;your vault_secret_access_key from above&gt;',\naws_region 'us-east-1'\n);\n</code></pre> <pre><code>create server s3_server\nforeign data wrapper s3_wrapper\noptions (\naws_access_key_id 'your_aws_access_key_id',\naws_secret_access_key 'your_aws_secret_access_key',\naws_region 'us-east-1'\n);\n</code></pre> <p>The full list of options are below: - <code>aws_access_key_id</code> (required) - Your access key - <code>aws_secret_access_key</code> (required) - Your secret key - <code>aws_region</code> (required) - The region of your bucket (if providing an endpoint URL with a region in it, make sure that they are the same) - <code>endpoint_url</code> (optional) - An optional URL to allow connection to S3-compliant providers (i.e. Wasabi, Cloudflare R2, Backblaze B2, DigitalOcean Spaces)</p>"},{"location":"s3/#connecting-to-s3-compliant-providers-wasabi","title":"Connecting to S3-compliant Providers - Wasabi","text":"<pre><code>create server s3_server\nforeign data wrapper s3_wrapper\noptions (\naws_access_key_id 'you_wasabi_access_key',\naws_secret_access_key 'your_wasabi_secret_access_key',\naws_region 'eu-central-1',\nendpoint_url 'https://s3.eu-central-1.wasabisys.com'\n);\n</code></pre>"},{"location":"s3/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The S3 Wrapper supports data reads from S3.</p> Integration Select Insert Update Delete Truncate S3 \u2705 \u274c \u274c \u274c \u274c <p>For example:</p> <pre><code>create foreign table s3_table_csv (\nname text,\nsex text,\nage text,\nheight text,\nweight text\n)\nserver s3_server\noptions (\nuri 's3://bucket/s3_table.csv',\nformat 'csv',\nhas_header 'true'\n);\n</code></pre> <p>One file in S3 corresponds a foreign table in Postgres. For CSV and JSONL file, all columns must be present in the foreign table and type must be <code>text</code>. You can do custom transformations, like type conversion, by creating a view on top of the foreign table or using a subquery.</p> <p>For Parquet file, no need to define all columns in the foreign table but column names must match between Parquet file and its foreign table.</p>"},{"location":"s3/#foreign-table-options","title":"Foreign table options","text":"<p>The full list of foreign table options are below:</p> <ul> <li><code>uri</code> - S3 URI, required. For example, <code>s3://bucket/s3_table.csv</code></li> <li><code>format</code> - File format, required. <code>csv</code>, <code>jsonl</code>, or <code>parquet</code></li> <li><code>has_header</code> - If the CSV file has header, optional. <code>true</code> or <code>false</code>, default is <code>false</code></li> <li><code>compress</code> - Compression algorithm, optional. One of <code>gzip</code>, <code>bzip2</code>, <code>xz</code>, <code>zlib</code>, default is no compression</li> </ul>"},{"location":"s3/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW doesn't support query pushdown.</p>"},{"location":"s3/#examples","title":"Examples","text":"<p>Some examples on how to use S3 foreign tables.</p>"},{"location":"s3/#basic-example","title":"Basic example","text":"<p>This will create some \"foreign table\" inside your Postgres database can read data from S3:</p> <pre><code>-- CSV file, no compression\ncreate foreign table s3_table_csv (\nname text,\nsex text,\nage text,\nheight text,\nweight text\n)\nserver s3_server\noptions (\nuri 's3://bucket/s3_table.csv',\nformat 'csv',\nhas_header 'true'\n);\n\n-- JSON line file, no compression\ncreate foreign table s3_table_jsonl (\nname text,\nsex text,\nage text,\nheight text,\nweight text\n)\nserver s3_server\noptions (\nuri 's3://bucket/s3_table.jsonl',\nformat 'jsonl'\n);\n\n-- GZIP compressed CSV file\ncreate foreign table s3_table_csv_gzip (\nname text,\nsex text,\nage text,\nheight text,\nweight text\n)\nserver s3_server\noptions (\nuri 's3://bucket/s3_table.csv.gz',\nformat 'csv',\nhas_header 'true',\ncompress 'gzip'\n);\n\n-- Parquet file, no compression\ncreate foreign table s3_table_parquet (\nid integer,\nbool_col boolean,\nbigint_col bigint,\nfloat_col real,\ndate_string_col text,\ntimestamp_col timestamp\n)\nserver s3_server\noptions (\nuri 's3://bucket/s3_table.parquet',\nformat 'parquet'\n);\n\n-- GZIP compressed Parquet file\ncreate foreign table s3_table_parquet_gz (\nid integer,\nbool_col boolean,\nbigint_col bigint,\nfloat_col real,\ndate_string_col text,\ntimestamp_col timestamp\n)\nserver s3_server\noptions (\nuri 's3://bucket/s3_table.parquet.gz',\nformat 'parquet',\ncompress 'gzip'\n);\n</code></pre>"},{"location":"stripe/","title":"Stripe","text":"<p>Stripe is an API driven online payment processing utility. <code>supabase/wrappers</code> exposes below endpoints.</p> <p>Warning</p> <p>Restoring a logical backup of a database with a materialized view using a foreign table can fail. For this reason, either do not use foreign tables in materialized views or use them in databases with physical backups enabled.</p>"},{"location":"stripe/#preparation","title":"Preparation","text":"<p>Before you get started, make sure the <code>wrappers</code> extension is installed on your database:</p> <pre><code>create extension if not exists wrappers with schema extensions;\n</code></pre> <p>and then create the foreign data wrapper:</p> <pre><code>create foreign data wrapper stripe_wrapper\nhandler stripe_fdw_handler\nvalidator stripe_fdw_validator;\n</code></pre>"},{"location":"stripe/#secure-your-credentials-optional","title":"Secure your credentials (optional)","text":"<p>By default, Postgres stores FDW credentials inside <code>pg_catalog.pg_foreign_server</code> in plain text. Anyone with access to this table will be able to view these credentials. Wrappers is designed to work with Vault, which provides an additional level of security for storing credentials. We recommend using Vault to store your credentials.</p> <pre><code>-- Save your Stripe API key in Vault and retrieve the `key_id`\ninsert into vault.secrets (name, secret)\nvalues (\n'stripe',\n'YOUR_SECRET'\n)\nreturning key_id;\n</code></pre>"},{"location":"stripe/#connecting-to-stripe","title":"Connecting to Stripe","text":"<p>We need to provide Postgres with the credentials to connect to Stripe, and any additional options. We can do this using the <code>create server</code> command:</p> With VaultWithout Vault <pre><code>create server stripe_server\nforeign data wrapper stripe_wrapper\noptions (\napi_key_id '&lt;key_ID&gt;', -- The Key ID from above, required.\napi_url 'https://api.stripe.com/v1/'  -- Stripe API base URL, optional. Default is 'https://api.stripe.com/v1/'\n);\n</code></pre> <pre><code>create server stripe_server\nforeign data wrapper stripe_wrapper\noptions (\napi_key '&lt;Stripe API Key&gt;',  -- Stripe API key, required\napi_url 'https://api.stripe.com/v1/'  -- Stripe API base URL, optional. Default is 'https://api.stripe.com/v1/'\n);\n</code></pre>"},{"location":"stripe/#creating-foreign-tables","title":"Creating Foreign Tables","text":"<p>The Stripe Wrapper supports data read and modify from Stripe API.</p> Object Select Insert Update Delete Truncate Accounts \u2705 \u274c \u274c \u274c \u274c Balance \u2705 \u274c \u274c \u274c \u274c Balance Transactions \u2705 \u274c \u274c \u274c \u274c Charges \u2705 \u274c \u274c \u274c \u274c Checkout Sessions \u2705 \u274c \u274c \u274c \u274c Customers \u2705 \u2705 \u2705 \u2705 \u274c Disputes \u2705 \u274c \u274c \u274c \u274c Events \u2705 \u274c \u274c \u274c \u274c Files \u2705 \u274c \u274c \u274c \u274c File Links \u2705 \u274c \u274c \u274c \u274c Invoices \u2705 \u274c \u274c \u274c \u274c Mandates \u2705 \u274c \u274c \u274c \u274c PaymentIntents \u2705 \u274c \u274c \u274c \u274c Payouts \u2705 \u274c \u274c \u274c \u274c Prices \u2705 \u274c \u274c \u274c \u274c Products \u2705 \u2705 \u2705 \u2705 \u274c Refunds \u2705 \u274c \u274c \u274c \u274c SetupAttempts \u2705 \u274c \u274c \u274c \u274c SetupIntents \u2705 \u274c \u274c \u274c \u274c Subscriptions \u2705 \u2705 \u2705 \u2705 \u274c Tokens \u2705 \u274c \u274c \u274c \u274c Topups \u2705 \u274c \u274c \u274c \u274c Transfers \u2705 \u274c \u274c \u274c \u274c <p>The Stripe foreign tables mirror Stripe's API. We can create a schema to hold all the Stripe tables.</p> <pre><code>create schema stripe;\n</code></pre> <p>Then create the foreign table, for example:</p> <pre><code>create foreign table stripe.accounts (\nid text,\nbusiness_type text,\ncountry text,\nemail text,\ntype text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'accounts'\n);\n</code></pre> <p><code>attrs</code> is a special column which stores all the object attributes in JSON format, you can extract any attributes needed or its associated sub objects from it. See more examples below.</p>"},{"location":"stripe/#accounts","title":"Accounts","text":"<p>read only</p> <p>This is an object representing a Stripe account.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.accounts (\nid text,\nbusiness_type text,\ncountry text,\nemail text,\ntype text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'accounts'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> </ul>"},{"location":"stripe/#balance","title":"Balance","text":"<p>read only</p> <p>Shows the balance currently on your Stripe account.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.balance (\nbalance_type text,\namount bigint,\ncurrency text,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'balance'\n);\n</code></pre>"},{"location":"stripe/#balance-transactions","title":"Balance Transactions","text":"<p>read only</p> <p>Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.balance_transactions (\nid text,\namount bigint,\ncurrency text,\ndescription text,\nfee bigint,\nnet bigint,\nstatus text,\ntype text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'balance_transactions'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>type</li> </ul>"},{"location":"stripe/#charges","title":"Charges","text":"<p>read only</p> <p>To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.charges (\nid text,\namount bigint,\ncurrency text,\ncustomer text,\ndescription text,\ninvoice text,\npayment_intent text,\nstatus text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'charges'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>customer</li> </ul>"},{"location":"stripe/#checkout-sessions","title":"Checkout Sessions","text":"<p>read only</p> <p>A Checkout Session represents your customer's session as they pay for one-time purchases or subscriptions through Checkout or Payment Links. We recommend creating a new Session each time your customer attempts to pay.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.checkout_sessions (\nid text,\ncustomer text,\npayment_intent text,\nsubscription text,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'checkout/sessions',\nrowid_column 'id'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>customer</li> <li>payment_intent</li> <li>subscription</li> </ul>"},{"location":"stripe/#customers","title":"Customers","text":"<p>read and modify</p> <p>Contains customers known to Stripe.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.customers (\nid text,\nemail text,\nname text,\ndescription text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'customers',\nrowid_column 'id'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>email</li> </ul>"},{"location":"stripe/#disputes","title":"Disputes","text":"<p>read only</p> <p>A dispute occurs when a customer questions your charge with their card issuer.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.disputes (\nid text,\namount bigint,\ncurrency text,\ncharge text,\npayment_intent text,\nreason text,\nstatus text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'disputes'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>charge</li> <li>payment_intent</li> </ul>"},{"location":"stripe/#events","title":"Events","text":"<p>read only</p> <p>Events are our way of letting you know when something interesting happens in your account.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.events (\nid text,\ntype text,\napi_version text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'events'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>type</li> </ul>"},{"location":"stripe/#files","title":"Files","text":"<p>read only</p> <p>This is an object representing a file hosted on Stripe's servers.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.files (\nid text,\nfilename text,\npurpose text,\ntitle text,\nsize bigint,\ntype text,\nurl text,\ncreated timestamp,\nexpires_at timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'files'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>purpose</li> </ul>"},{"location":"stripe/#file-links","title":"File Links","text":"<p>read only</p> <p>To share the contents of a <code>File</code> object with non-Stripe users, you can create a <code>FileLink</code>.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.file_links (\nid text,\nfile text,\nurl text,\ncreated timestamp,\nexpired bool,\nexpires_at timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'file_links'\n);\n</code></pre>"},{"location":"stripe/#invoices","title":"Invoices","text":"<p>read only</p> <p>Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.invoices (\nid text,\ncustomer text,\nsubscription text,\nstatus text,\ntotal bigint,\ncurrency text,\nperiod_start timestamp,\nperiod_end timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'invoices'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>customer</li> <li>status</li> <li>subscription</li> </ul>"},{"location":"stripe/#mandates","title":"Mandates","text":"<p>read only</p> <p>A Mandate is a record of the permission a customer has given you to debit their payment method.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.mandates (\nid text,\npayment_method text,\nstatus text,\ntype text,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'mandates'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> </ul>"},{"location":"stripe/#payment-intents","title":"Payment Intents","text":"<p>read only</p> <p>A payment intent guides you through the process of collecting a payment from your customer.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.payment_intents (\nid text,\ncustomer text,\namount bigint,\ncurrency text,\npayment_method text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'payment_intents'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>customer</li> </ul>"},{"location":"stripe/#payouts","title":"Payouts","text":"<p>read only</p> <p>A <code>Payout</code> object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.payouts (\nid text,\namount bigint,\ncurrency text,\narrival_date timestamp,\ndescription text,\nstatement_descriptor text,\nstatus text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'payouts'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>status</li> </ul>"},{"location":"stripe/#prices","title":"Prices","text":"<p>read only</p> <p>A <code>Price</code> object is needed for all of your products to facilitate multiple currencies and pricing options.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.prices (\nid text,\nactive bool,\ncurrency text,\nproduct text,\nunit_amount bigint,\ntype text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'prices'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>active</li> </ul>"},{"location":"stripe/#products","title":"Products","text":"<p>read and modify</p> <p>All products available in Stripe.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.products (\nid text,\nname text,\nactive bool,\ndefault_price text,\ndescription text,\ncreated timestamp,\nupdated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'products',\nrowid_column 'id'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>active</li> </ul>"},{"location":"stripe/#refunds","title":"Refunds","text":"<p>read only</p> <p><code>Refund</code> objects allow you to refund a charge that has previously been created but not yet refunded.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.refunds (\nid text,\namount bigint,\ncurrency text,\ncharge text,\npayment_intent text,\nreason text,\nstatus text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'refunds'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>charge</li> <li>payment_intent</li> </ul>"},{"location":"stripe/#setupattempts","title":"SetupAttempts","text":"<p>read only</p> <p>A <code>SetupAttempt</code> describes one attempted confirmation of a SetupIntent, whether that confirmation was successful or unsuccessful.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.setup_attempts (\nid text,\napplication text,\ncustomer text,\non_behalf_of text,\npayment_method text,\nsetup_intent text,\nstatus text,\nusage text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'setup_attempts'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>setup_intent</li> </ul>"},{"location":"stripe/#setupintents","title":"SetupIntents","text":"<p>read only</p> <p>A <code>SetupIntent</code> guides you through the process of setting up and saving a customer's payment credentials for future payments.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.setup_intents (\nid text,\nclient_secret text,\ncustomer text,\ndescription text,\npayment_method text,\nstatus text,\nusage text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'setup_intents'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>customer</li> <li>payment_method</li> </ul>"},{"location":"stripe/#subscriptions","title":"Subscriptions","text":"<p>read and modify</p> <p>Customer recurring payment schedules.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.subscriptions (\nid text,\ncustomer text,\ncurrency text,\ncurrent_period_start timestamp,\ncurrent_period_end timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'subscriptions',\nrowid_column 'id'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>customer</li> <li>price</li> <li>status</li> </ul>"},{"location":"stripe/#tokens","title":"Tokens","text":"<p>read only</p> <p>Tokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.tokens (\nid text,\ncustomer text,\ncurrency text,\ncurrent_period_start timestamp,\ncurrent_period_end timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'tokens'\n);\n</code></pre>"},{"location":"stripe/#top-ups","title":"Top-ups","text":"<p>read only</p> <p>To top up your Stripe balance, you create a top-up object.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.topups (\nid text,\namount bigint,\ncurrency text,\ndescription text,\nstatus text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'topups'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>status</li> </ul>"},{"location":"stripe/#transfers","title":"Transfers","text":"<p>read only</p> <p>A Transfer object is created when you move funds between Stripe accounts as part of Connect.</p> <p>Ref: Stripe docs</p> <pre><code>create foreign table stripe.transfers (\nid text,\namount bigint,\ncurrency text,\ndescription text,\ndestination text,\ncreated timestamp,\nattrs jsonb\n)\nserver stripe_server\noptions (\nobject 'transfers'\n);\n</code></pre> <p>While any column is allowed in a where clause, it is most efficient to filter by:</p> <ul> <li>id</li> <li>destination</li> </ul>"},{"location":"stripe/#query-pushdown-support","title":"Query Pushdown Support","text":"<p>This FDW supports <code>where</code> clause pushdown. You can specify a filter in <code>where</code> clause and it will be passed to Stripe API call.</p> <p>For example, this query</p> <pre><code>select * from stripe.customers where id = 'cus_xxx';\n</code></pre> <p>will be translated Stripe API call: <code>https://api.stripe.com/v1/customers/cus_xxx</code>.</p> <p>For supported filter columns for each object, please check out foreign table documents above.</p>"},{"location":"stripe/#examples","title":"Examples","text":"<p>Some examples on how to use Stripe foreign tables.</p>"},{"location":"stripe/#basic-example","title":"Basic example","text":"<pre><code>-- always limit records to reduce API calls to Stripe\nselect * from stripe.customers limit 10;\nselect * from stripe.invoices limit 10;\nselect * from stripe.subscriptions limit 10;\n</code></pre>"},{"location":"stripe/#query-json-attributes","title":"Query JSON attributes","text":"<pre><code>-- extract account name for an invoice\nselect id, attrs-&gt;&gt;'account_name' as account_name\nfrom stripe.invoices where id = 'in_xxx';\n\n-- extract invoice line items for an invoice\nselect id, attrs#&gt;'{lines,data}' as line_items\nfrom stripe.invoices where id = 'in_xxx';\n\n-- extract subscription items for a subscription\nselect id, attrs#&gt;'{items,data}' as items\nfrom stripe.subscriptions where id = 'sub_xxx';\n</code></pre>"},{"location":"stripe/#data-modify","title":"Data modify","text":"<pre><code>insert into stripe.customers(email,name,description) values ('test@test.com', 'test name', null);\nupdate stripe.customers set description='hello fdw' where id ='cus_xxx';\nupdate stripe.customers set attrs='{\"metadata[foo]\": \"bar\"}' where id ='cus_xxx';\ndelete from stripe.customers where id ='cus_xxx';\n</code></pre>"}]}