{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"supabase/wrappers Documentation : https://supabase.github.io/wrappers Source Code : https://github.com/supabase/wrappers Overview supabase/wrappers is a PostgreSQL extension that provides integrations with external sources so you can interact with third-party data using SQL. For example, the Stripe wrapper allows you to query and join against your Stripe customer data straight from PostgreSQL: 1 2 3 4 5 select customer_id currency from stripe . customers ; returns 1 2 3 4 customer_id | currency --------------------+----------- cus_MJiBtCqOF1Bb3F | usd (1 row) Currently supabase/wrappers supports: Integration Select Insert Update Delete Truncate Firebase Stripe","title":"Welcome"},{"location":"#supabasewrappers","text":"Documentation : https://supabase.github.io/wrappers Source Code : https://github.com/supabase/wrappers","title":"supabase/wrappers"},{"location":"#overview","text":"supabase/wrappers is a PostgreSQL extension that provides integrations with external sources so you can interact with third-party data using SQL. For example, the Stripe wrapper allows you to query and join against your Stripe customer data straight from PostgreSQL: 1 2 3 4 5 select customer_id currency from stripe . customers ; returns 1 2 3 4 customer_id | currency --------------------+----------- cus_MJiBtCqOF1Bb3F | usd (1 row) Currently supabase/wrappers supports: Integration Select Insert Update Delete Truncate Firebase Stripe","title":"Overview"},{"location":"contributing/","text":"supabase/wrappers is OSS. PRs and issues are welcome. Development Requirements: rust cargo docker-compose pgx Testing Tests are located in ./test/sql with expected output in ./test/expected To run tests locally, execute: 1 2 cd wrappers docker-compose -f .ci/docker-compose.yaml run test-wrappers Interactive PSQL Development To reduce the iteration cycle, you may want to launch a psql prompt with wrappers installed to experiment 1 2 cd wrappers cargo pgx run pg14 --features clickhouse_fdw Try out the commands below to spin up a database with the extension installed & query a table using GraphQL. Experiment with aliasing field/table names and filtering on different columns. 1 2 > create extension wrappers cascade ; CREATE EXTENSION Documentation All public API must be documented. Building documentation requires python 3.6+ Install Dependencies Install mkdocs, themes, and extensions. 1 pip install -r docs/requirements_docs.txt Serving To serve the documentation locally run 1 mkdocs serve and visit the docs at http://127.0.0.1:8000/wrappers/ Deploying If you have write access to the repo, docs can be updated using 1 mkdocs gh-deploy","title":"Contributing"},{"location":"contributing/#development","text":"Requirements: rust cargo docker-compose pgx","title":"Development"},{"location":"contributing/#testing","text":"Tests are located in ./test/sql with expected output in ./test/expected To run tests locally, execute: 1 2 cd wrappers docker-compose -f .ci/docker-compose.yaml run test-wrappers","title":"Testing"},{"location":"contributing/#interactive-psql-development","text":"To reduce the iteration cycle, you may want to launch a psql prompt with wrappers installed to experiment 1 2 cd wrappers cargo pgx run pg14 --features clickhouse_fdw Try out the commands below to spin up a database with the extension installed & query a table using GraphQL. Experiment with aliasing field/table names and filtering on different columns. 1 2 > create extension wrappers cascade ; CREATE EXTENSION","title":"Interactive PSQL Development"},{"location":"contributing/#documentation","text":"All public API must be documented. Building documentation requires python 3.6+","title":"Documentation"},{"location":"contributing/#install-dependencies","text":"Install mkdocs, themes, and extensions. 1 pip install -r docs/requirements_docs.txt","title":"Install Dependencies"},{"location":"contributing/#serving","text":"To serve the documentation locally run 1 mkdocs serve and visit the docs at http://127.0.0.1:8000/wrappers/","title":"Serving"},{"location":"contributing/#deploying","text":"If you have write access to the repo, docs can be updated using 1 mkdocs gh-deploy","title":"Deploying"},{"location":"firebase/","text":"Firebase is an app development platform built around non-relational technologies. The Firebase wrapper supports connecting to below objects. Authentication Users ( read only ) Firestore Database Documents ( read only ) Wrapper To get started with the Firebase wrapper, create a foreign data wrapper specifying handler and validator as below. 1 2 3 4 5 create extension if not exists wrappers ; create foreign data wrapper firebase_wrapper handler firebase_fdw_handler validator firebase_fdw_validator ; Server Next, we need to create a server for the FDW to hold options and credentials. Auth (Supabase) If you are using the Supabase platform, this is the recommended approach for securing your Firebase service account credentials. Create a secure key using pgsodium 1 select pgsodium . create_key ( name : = 'firebase' ); Save your Firebase service account key in Vault and retrieve the key_id 1 2 3 4 5 6 7 8 9 10 11 12 13 insert into vault . secrets ( secret , key_id ) values ( '{ \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... }' , ( select id from pgsodium . valid_key where name = 'firebase' ) ); returning key_id ; Create the foreign server 1 2 3 4 5 6 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key_id '<your key_id from above>' project_id '<firebase_project_id>' ); Auth (Insecure) If the platform you are using does not support pgsodium and Vault , you can create a server by storing yourt service account key directly. Important Credentials stored using this method can be viewed as plain text by anyone with access to pg_catalog.pg_foreign_server 1 2 3 4 5 6 7 8 9 10 11 12 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key ' { \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... } ' , project_id 'firebase_project_id' , ); Tables Firebase collections are non-relational/documents. With the exception of metadata fields, all returned data are availble as a attrs jsonb column. Firestore To map a Firestore collection provide its location using the format firestore/<collection_id> as the object option as shown below. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_docs ( name text , created_at timestamp , updated_at timestamp , attrs jsonb ) server firebase_server options ( object 'firestore/user-profiles' -- format: 'firestore/[collection_id]' ); Note that name , created_at , and updated_at , are automatic metadata fields on all Firestore collections. auth/users The auth/users collection is a special case with unique metadata. The following shows how to map Firebase users to PostgreSQL table. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_users ( uid text , email text , created_at timestamp , attrs jsonb ) server firebase_server options ( object 'auth/users' );","title":"Firebase"},{"location":"firebase/#wrapper","text":"To get started with the Firebase wrapper, create a foreign data wrapper specifying handler and validator as below. 1 2 3 4 5 create extension if not exists wrappers ; create foreign data wrapper firebase_wrapper handler firebase_fdw_handler validator firebase_fdw_validator ;","title":"Wrapper"},{"location":"firebase/#server","text":"Next, we need to create a server for the FDW to hold options and credentials.","title":"Server"},{"location":"firebase/#auth-supabase","text":"If you are using the Supabase platform, this is the recommended approach for securing your Firebase service account credentials. Create a secure key using pgsodium 1 select pgsodium . create_key ( name : = 'firebase' ); Save your Firebase service account key in Vault and retrieve the key_id 1 2 3 4 5 6 7 8 9 10 11 12 13 insert into vault . secrets ( secret , key_id ) values ( '{ \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... }' , ( select id from pgsodium . valid_key where name = 'firebase' ) ); returning key_id ; Create the foreign server 1 2 3 4 5 6 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key_id '<your key_id from above>' project_id '<firebase_project_id>' );","title":"Auth (Supabase)"},{"location":"firebase/#auth-insecure","text":"If the platform you are using does not support pgsodium and Vault , you can create a server by storing yourt service account key directly. Important Credentials stored using this method can be viewed as plain text by anyone with access to pg_catalog.pg_foreign_server 1 2 3 4 5 6 7 8 9 10 11 12 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key ' { \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... } ' , project_id 'firebase_project_id' , );","title":"Auth (Insecure)"},{"location":"firebase/#tables","text":"Firebase collections are non-relational/documents. With the exception of metadata fields, all returned data are availble as a attrs jsonb column.","title":"Tables"},{"location":"firebase/#firestore","text":"To map a Firestore collection provide its location using the format firestore/<collection_id> as the object option as shown below. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_docs ( name text , created_at timestamp , updated_at timestamp , attrs jsonb ) server firebase_server options ( object 'firestore/user-profiles' -- format: 'firestore/[collection_id]' ); Note that name , created_at , and updated_at , are automatic metadata fields on all Firestore collections.","title":"Firestore"},{"location":"firebase/#authusers","text":"The auth/users collection is a special case with unique metadata. The following shows how to map Firebase users to PostgreSQL table. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_users ( uid text , email text , created_at timestamp , attrs jsonb ) server firebase_server options ( object 'auth/users' );","title":"auth/users"},{"location":"installation/","text":"First, install pgx Then clone the repo and install using 1 2 3 git clone https://github.com/supabase/wrappers.git cd wrappers/wrappers cargo pgx install --no-default-features --features pg14,<some_integration>_fdw --release To enable the extension in PostgreSQL we must execute a create extension statement. 1 create extension wrappers ;","title":"Installation"},{"location":"stripe/","text":"Stripe is an API driven online payment processing utilty. supabase/wrappers exposes below endpoints. Balance ( read only ) Balance Transactions ( read only ) Charges ( read only ) Customers ( read and modify ) Disputes ( read only ) Events ( read only ) Files ( read only ) File Links ( read only ) Invoices ( read only ) Mandates ( read only ) PaymentIntents ( read only ) Payouts ( read only ) Products ( read and modify ) Refunds ( read only ) SetupAttempts ( read only ) SetupIntents ( read only ) Subscriptions ( read and modify ) Tokens ( read only ) Wrapper To get started with the Stripe wrapper, create a foreign data wrapper specifying handler and validator as below. 1 2 3 4 5 create extension if not exists wrappers ; create foreign data wrapper stripe_wrapper handler stripe_fdw_handler validator stripe_fdw_validator ; Server Next, we need to create a server for the FDW to hold options and credentials. Auth (Supabase) If you are using the Supabase platform, this is the recommended approach for securing your Stripe API key . Create a secure key using pgsodium 1 select pgsodium . create_key ( name : = 'stripe' ); Save your Stripe API key in Vault and retrieve the key_id 1 2 3 4 5 6 7 insert into vault . secrets ( secret , key_id ) values ( 'sk_test_xxx' , ( select id from pgsodium . valid_key where name = 'stripe' ) ) returning key_id ; Create the foreign server 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key_id '<your key_id from above>' ); Auth (Insecure) If the platform you are using does not support pgsodium and Vault you can create a server by storing your Stripe API key directly. Important Credentials stored using this method can be viewed as plain text by anyone with access to pg_catalog.pg_foreign_server 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key 'sk_test_xxx' ); Tables The Stripe tables mirror Stripe's API. (Optional) Create a schema to hold the Stripe tables. 1 create schema stripe ; Balance read only Shows the balance currently on your Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 create foreign table stripe . balance ( balance_type text , amount bigint , currency text , attrs jsonb ) server stripe_server options ( object 'balance' ); Balance Transactions read only Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . balance_transactions ( id text , amount bigint , currency text , description text , fee bigint , net bigint , status text , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'balance_transactions' ); While any column is allowed in a where clause, it is most efficient to filter by: id type Charges read only To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . charges ( id text , amount bigint , currency text , customer text , description text , invoice text , payment_intent text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'charges' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer Customers read and modify Contains customers known to Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . customers ( id text , email text , name text , description text , created timestamp , attrs jsonb ) server stripe_server options ( object 'customers' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id email Disputes read only A dispute occurs when a customer questions your charge with their card issuer. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe_disputes ( id text , amount bigint , currency text , charge text , payment_intent text , reason text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'disputes' ); While any column is allowed in a where clause, it is most efficient to filter by: id charge payment_intent Events read only Events are our way of letting you know when something interesting happens in your account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 create foreign table stripe_events ( id text , type text , api_version text , created timestamp , attrs jsonb ) server stripe_server options ( object 'events' ); While any column is allowed in a where clause, it is most efficient to filter by: id type Files read only This is an object representing a file hosted on Stripe's servers. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe_files ( id text , filename text , purpose text , title text , size bigint , type text , url text , created timestamp , expires_at timestamp , attrs jsonb ) server stripe_server options ( object 'files' ); While any column is allowed in a where clause, it is most efficient to filter by: id purpose File Links read only To share the contents of a File object with non-Stripe users, you can create a FileLink . Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe_file_links ( id text , file text , url text , created timestamp , expired bool , expires_at timestamp , attrs jsonb ) server stripe_server options ( object 'file_links' ); Invoices read only Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . invoices ( id text , customer text , subscription text , status text , total bigint , currency text , period_start timestamp , period_end timestamp , attrs jsonb ) server stripe_server options ( object 'invoices' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer status subscription Mandates read only A Mandate is a record of the permission a customer has given you to debit their payment method. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 create foreign table stripe_mandates ( id text , payment_method text , status text , type text , attrs jsonb ) server stripe_server options ( object 'mandates' ); While any column is allowed in a where clause, it is most efficient to filter by: id Payment Intents read only A payment intent guides you through the process of collecting a payment from your customer. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . payment_intents ( id text , customer text , amount bigint , currency text , payment_method text , created timestamp , attrs jsonb ) server stripe_server options ( object 'payment_intents' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer Payouts read only A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe_payouts ( id text , amount bigint , currency text , arrival_date timestamp , description text , statement_descriptor text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'payouts' ); While any column is allowed in a where clause, it is most efficient to filter by: id status Products read and modify All products available in Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . products ( id text , name text , active bool , default_price text , description text , created timestamp , updated timestamp , attrs jsonb ) server stripe_server options ( object 'products' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id active Refunds read only Refund objects allow you to refund a charge that has previously been created but not yet refunded. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe_refunds ( id text , amount bigint , currency text , charge text , payment_intent text , reason text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'refunds' ); While any column is allowed in a where clause, it is most efficient to filter by: id charge payment_intent SetupAttempts read only A SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation was successful or unsuccessful. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe_setup_attempts ( id text , application text , customer text , on_behalf_of text , payment_method text , setup_intent text , status text , usage text , created timestamp , attrs jsonb ) server stripe_server options ( object 'setup_attempts' ); While any column is allowed in a where clause, it is most efficient to filter by: id setup_intent SetupIntents read only A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe_setup_intents ( id text , client_secret text , customer text , description text , payment_method text , status text , usage text , created timestamp , attrs jsonb ) server stripe_server options ( object 'setup_intents' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer payment_method Subscriptions read and modify Customer recurring payment schedules. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . subscriptions ( id text , customer text , currency text , current_period_start timestamp , current_period_end timestamp , attrs jsonb ) server stripe_server options ( object 'subscriptions' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer price status Tokens read only Tokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table stripe_tokens ( id text , customer text , currency text , current_period_start timestamp , current_period_end timestamp , attrs jsonb ) server stripe_server options ( object 'tokens' ); While any column is allowed in a where clause, it is most efficient to filter by: id","title":"Stripe"},{"location":"stripe/#wrapper","text":"To get started with the Stripe wrapper, create a foreign data wrapper specifying handler and validator as below. 1 2 3 4 5 create extension if not exists wrappers ; create foreign data wrapper stripe_wrapper handler stripe_fdw_handler validator stripe_fdw_validator ;","title":"Wrapper"},{"location":"stripe/#server","text":"Next, we need to create a server for the FDW to hold options and credentials.","title":"Server"},{"location":"stripe/#auth-supabase","text":"If you are using the Supabase platform, this is the recommended approach for securing your Stripe API key . Create a secure key using pgsodium 1 select pgsodium . create_key ( name : = 'stripe' ); Save your Stripe API key in Vault and retrieve the key_id 1 2 3 4 5 6 7 insert into vault . secrets ( secret , key_id ) values ( 'sk_test_xxx' , ( select id from pgsodium . valid_key where name = 'stripe' ) ) returning key_id ; Create the foreign server 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key_id '<your key_id from above>' );","title":"Auth (Supabase)"},{"location":"stripe/#auth-insecure","text":"If the platform you are using does not support pgsodium and Vault you can create a server by storing your Stripe API key directly. Important Credentials stored using this method can be viewed as plain text by anyone with access to pg_catalog.pg_foreign_server 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key 'sk_test_xxx' );","title":"Auth (Insecure)"},{"location":"stripe/#tables","text":"The Stripe tables mirror Stripe's API. (Optional) Create a schema to hold the Stripe tables. 1 create schema stripe ;","title":"Tables"},{"location":"stripe/#balance","text":"read only Shows the balance currently on your Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 create foreign table stripe . balance ( balance_type text , amount bigint , currency text , attrs jsonb ) server stripe_server options ( object 'balance' );","title":"Balance"},{"location":"stripe/#balance-transactions","text":"read only Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . balance_transactions ( id text , amount bigint , currency text , description text , fee bigint , net bigint , status text , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'balance_transactions' ); While any column is allowed in a where clause, it is most efficient to filter by: id type","title":"Balance Transactions"},{"location":"stripe/#charges","text":"read only To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . charges ( id text , amount bigint , currency text , customer text , description text , invoice text , payment_intent text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'charges' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer","title":"Charges"},{"location":"stripe/#customers","text":"read and modify Contains customers known to Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . customers ( id text , email text , name text , description text , created timestamp , attrs jsonb ) server stripe_server options ( object 'customers' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id email","title":"Customers"},{"location":"stripe/#disputes","text":"read only A dispute occurs when a customer questions your charge with their card issuer. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe_disputes ( id text , amount bigint , currency text , charge text , payment_intent text , reason text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'disputes' ); While any column is allowed in a where clause, it is most efficient to filter by: id charge payment_intent","title":"Disputes"},{"location":"stripe/#events","text":"read only Events are our way of letting you know when something interesting happens in your account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 create foreign table stripe_events ( id text , type text , api_version text , created timestamp , attrs jsonb ) server stripe_server options ( object 'events' ); While any column is allowed in a where clause, it is most efficient to filter by: id type","title":"Events"},{"location":"stripe/#files","text":"read only This is an object representing a file hosted on Stripe's servers. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe_files ( id text , filename text , purpose text , title text , size bigint , type text , url text , created timestamp , expires_at timestamp , attrs jsonb ) server stripe_server options ( object 'files' ); While any column is allowed in a where clause, it is most efficient to filter by: id purpose","title":"Files"},{"location":"stripe/#file-links","text":"read only To share the contents of a File object with non-Stripe users, you can create a FileLink . Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe_file_links ( id text , file text , url text , created timestamp , expired bool , expires_at timestamp , attrs jsonb ) server stripe_server options ( object 'file_links' );","title":"File Links"},{"location":"stripe/#invoices","text":"read only Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . invoices ( id text , customer text , subscription text , status text , total bigint , currency text , period_start timestamp , period_end timestamp , attrs jsonb ) server stripe_server options ( object 'invoices' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer status subscription","title":"Invoices"},{"location":"stripe/#mandates","text":"read only A Mandate is a record of the permission a customer has given you to debit their payment method. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 create foreign table stripe_mandates ( id text , payment_method text , status text , type text , attrs jsonb ) server stripe_server options ( object 'mandates' ); While any column is allowed in a where clause, it is most efficient to filter by: id","title":"Mandates"},{"location":"stripe/#payment-intents","text":"read only A payment intent guides you through the process of collecting a payment from your customer. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . payment_intents ( id text , customer text , amount bigint , currency text , payment_method text , created timestamp , attrs jsonb ) server stripe_server options ( object 'payment_intents' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer","title":"Payment Intents"},{"location":"stripe/#payouts","text":"read only A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe_payouts ( id text , amount bigint , currency text , arrival_date timestamp , description text , statement_descriptor text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'payouts' ); While any column is allowed in a where clause, it is most efficient to filter by: id status","title":"Payouts"},{"location":"stripe/#products","text":"read and modify All products available in Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . products ( id text , name text , active bool , default_price text , description text , created timestamp , updated timestamp , attrs jsonb ) server stripe_server options ( object 'products' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id active","title":"Products"},{"location":"stripe/#refunds","text":"read only Refund objects allow you to refund a charge that has previously been created but not yet refunded. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe_refunds ( id text , amount bigint , currency text , charge text , payment_intent text , reason text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'refunds' ); While any column is allowed in a where clause, it is most efficient to filter by: id charge payment_intent","title":"Refunds"},{"location":"stripe/#setupattempts","text":"read only A SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation was successful or unsuccessful. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe_setup_attempts ( id text , application text , customer text , on_behalf_of text , payment_method text , setup_intent text , status text , usage text , created timestamp , attrs jsonb ) server stripe_server options ( object 'setup_attempts' ); While any column is allowed in a where clause, it is most efficient to filter by: id setup_intent","title":"SetupAttempts"},{"location":"stripe/#setupintents","text":"read only A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe_setup_intents ( id text , client_secret text , customer text , description text , payment_method text , status text , usage text , created timestamp , attrs jsonb ) server stripe_server options ( object 'setup_intents' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer payment_method","title":"SetupIntents"},{"location":"stripe/#subscriptions","text":"read and modify Customer recurring payment schedules. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . subscriptions ( id text , customer text , currency text , current_period_start timestamp , current_period_end timestamp , attrs jsonb ) server stripe_server options ( object 'subscriptions' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer price status","title":"Subscriptions"},{"location":"stripe/#tokens","text":"read only Tokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table stripe_tokens ( id text , customer text , currency text , current_period_start timestamp , current_period_end timestamp , attrs jsonb ) server stripe_server options ( object 'tokens' ); While any column is allowed in a where clause, it is most efficient to filter by: id","title":"Tokens"}]}