// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod supabase {
    #[allow(dead_code)]
    pub mod wrappers {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone, Copy)]
            pub enum TypeOid {
                Bool,
                I8,
                I16,
                F32,
                I32,
                F64,
                I64,
                Numeric,
                String,
                Date,
                Timestamp,
                Json,
            }
            impl ::core::fmt::Debug for TypeOid {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        TypeOid::Bool => f.debug_tuple("TypeOid::Bool").finish(),
                        TypeOid::I8 => f.debug_tuple("TypeOid::I8").finish(),
                        TypeOid::I16 => f.debug_tuple("TypeOid::I16").finish(),
                        TypeOid::F32 => f.debug_tuple("TypeOid::F32").finish(),
                        TypeOid::I32 => f.debug_tuple("TypeOid::I32").finish(),
                        TypeOid::F64 => f.debug_tuple("TypeOid::F64").finish(),
                        TypeOid::I64 => f.debug_tuple("TypeOid::I64").finish(),
                        TypeOid::Numeric => f.debug_tuple("TypeOid::Numeric").finish(),
                        TypeOid::String => f.debug_tuple("TypeOid::String").finish(),
                        TypeOid::Date => f.debug_tuple("TypeOid::Date").finish(),
                        TypeOid::Timestamp => f.debug_tuple("TypeOid::Timestamp").finish(),
                        TypeOid::Json => f.debug_tuple("TypeOid::Json").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum Cell {
                Bool(bool),
                I8(i8),
                I16(i16),
                F32(f32),
                I32(i32),
                F64(f64),
                I64(i64),
                Numeric(f64),
                String(_rt::String),
                /// seconds since unix epoch
                Date(i64),
                /// microseconds since unix epoch
                Timestamp(i64),
                Json(_rt::String),
            }
            impl ::core::fmt::Debug for Cell {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Cell::Bool(e) => f.debug_tuple("Cell::Bool").field(e).finish(),
                        Cell::I8(e) => f.debug_tuple("Cell::I8").field(e).finish(),
                        Cell::I16(e) => f.debug_tuple("Cell::I16").field(e).finish(),
                        Cell::F32(e) => f.debug_tuple("Cell::F32").field(e).finish(),
                        Cell::I32(e) => f.debug_tuple("Cell::I32").field(e).finish(),
                        Cell::F64(e) => f.debug_tuple("Cell::F64").field(e).finish(),
                        Cell::I64(e) => f.debug_tuple("Cell::I64").field(e).finish(),
                        Cell::Numeric(e) => f.debug_tuple("Cell::Numeric").field(e).finish(),
                        Cell::String(e) => f.debug_tuple("Cell::String").field(e).finish(),
                        Cell::Date(e) => f.debug_tuple("Cell::Date").field(e).finish(),
                        Cell::Timestamp(e) => f.debug_tuple("Cell::Timestamp").field(e).finish(),
                        Cell::Json(e) => f.debug_tuple("Cell::Json").field(e).finish(),
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Row {
                handle: _rt::Resource<Row>,
            }

            impl Row {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Row {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]row"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Column {
                handle: _rt::Resource<Column>,
            }

            impl Column {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Column {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]column"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Clone)]
            pub enum Value {
                Cell(Cell),
                Array(_rt::Vec<Cell>),
            }
            impl ::core::fmt::Debug for Value {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Value::Cell(e) => f.debug_tuple("Value::Cell").field(e).finish(),
                        Value::Array(e) => f.debug_tuple("Value::Array").field(e).finish(),
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Param {
                pub id: u32,
                pub type_oid: u32,
            }
            impl ::core::fmt::Debug for Param {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Param")
                        .field("id", &self.id)
                        .field("type-oid", &self.type_oid)
                        .finish()
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Qual {
                handle: _rt::Resource<Qual>,
            }

            impl Qual {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Qual {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]qual"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Sort {
                handle: _rt::Resource<Sort>,
            }

            impl Sort {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Sort {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]sort"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Limit {
                handle: _rt::Resource<Limit>,
            }

            impl Limit {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Limit {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]limit"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Clone, Copy)]
            pub enum OptionsType {
                Server,
                Table,
            }
            impl ::core::fmt::Debug for OptionsType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        OptionsType::Server => f.debug_tuple("OptionsType::Server").finish(),
                        OptionsType::Table => f.debug_tuple("OptionsType::Table").finish(),
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Options {
                handle: _rt::Resource<Options>,
            }

            impl Options {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Options {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]options"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Context {
                handle: _rt::Resource<Context>,
            }

            impl Context {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Context {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]context"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            pub type FdwError = _rt::String;
            pub type FdwResult = Result<(), FdwError>;
            impl Row {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]row"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Row::from_handle(ret as u32)
                    }
                }
            }
            impl Row {
                #[allow(unused_unsafe, clippy::all)]
                pub fn cols(&self) -> _rt::Vec<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]row.cols"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base6 = l1;
                        let len6 = l2;
                        let mut result6 = _rt::Vec::with_capacity(len6);
                        for i in 0..len6 {
                            let base = base6.add(i * 8);
                            let e6 = {
                                let l3 = *base.add(0).cast::<*mut u8>();
                                let l4 = *base.add(4).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                _rt::string_lift(bytes5)
                            };
                            result6.push(e6);
                        }
                        _rt::cabi_dealloc(base6, len6 * 8, 4);
                        result6
                    }
                }
            }
            impl Row {
                #[allow(unused_unsafe, clippy::all)]
                pub fn cells(&self) -> _rt::Vec<Option<Cell>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]row.cells"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base22 = l1;
                        let len22 = l2;
                        let mut result22 = _rt::Vec::with_capacity(len22);
                        for i in 0..len22 {
                            let base = base22.add(i * 24);
                            let e22 = {
                                let l3 = i32::from(*base.add(0).cast::<u8>());

                                match l3 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l4 = i32::from(*base.add(8).cast::<u8>());
                                            let v21 = match l4 {
                                                0 => {
                                                    let e21 = {
                                                        let l5 =
                                                            i32::from(*base.add(16).cast::<u8>());

                                                        _rt::bool_lift(l5 as u8)
                                                    };
                                                    Cell::Bool(e21)
                                                }
                                                1 => {
                                                    let e21 = {
                                                        let l6 =
                                                            i32::from(*base.add(16).cast::<i8>());

                                                        l6 as i8
                                                    };
                                                    Cell::I8(e21)
                                                }
                                                2 => {
                                                    let e21 = {
                                                        let l7 =
                                                            i32::from(*base.add(16).cast::<i16>());

                                                        l7 as i16
                                                    };
                                                    Cell::I16(e21)
                                                }
                                                3 => {
                                                    let e21 = {
                                                        let l8 = *base.add(16).cast::<f32>();

                                                        l8
                                                    };
                                                    Cell::F32(e21)
                                                }
                                                4 => {
                                                    let e21 = {
                                                        let l9 = *base.add(16).cast::<i32>();

                                                        l9
                                                    };
                                                    Cell::I32(e21)
                                                }
                                                5 => {
                                                    let e21 = {
                                                        let l10 = *base.add(16).cast::<f64>();

                                                        l10
                                                    };
                                                    Cell::F64(e21)
                                                }
                                                6 => {
                                                    let e21 = {
                                                        let l11 = *base.add(16).cast::<i64>();

                                                        l11
                                                    };
                                                    Cell::I64(e21)
                                                }
                                                7 => {
                                                    let e21 = {
                                                        let l12 = *base.add(16).cast::<f64>();

                                                        l12
                                                    };
                                                    Cell::Numeric(e21)
                                                }
                                                8 => {
                                                    let e21 = {
                                                        let l13 = *base.add(16).cast::<*mut u8>();
                                                        let l14 = *base.add(20).cast::<usize>();
                                                        let len15 = l14;
                                                        let bytes15 = _rt::Vec::from_raw_parts(
                                                            l13.cast(),
                                                            len15,
                                                            len15,
                                                        );

                                                        _rt::string_lift(bytes15)
                                                    };
                                                    Cell::String(e21)
                                                }
                                                9 => {
                                                    let e21 = {
                                                        let l16 = *base.add(16).cast::<i64>();

                                                        l16
                                                    };
                                                    Cell::Date(e21)
                                                }
                                                10 => {
                                                    let e21 = {
                                                        let l17 = *base.add(16).cast::<i64>();

                                                        l17
                                                    };
                                                    Cell::Timestamp(e21)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 11,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e21 = {
                                                        let l18 = *base.add(16).cast::<*mut u8>();
                                                        let l19 = *base.add(20).cast::<usize>();
                                                        let len20 = l19;
                                                        let bytes20 = _rt::Vec::from_raw_parts(
                                                            l18.cast(),
                                                            len20,
                                                            len20,
                                                        );

                                                        _rt::string_lift(bytes20)
                                                    };
                                                    Cell::Json(e21)
                                                }
                                            };

                                            v21
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                }
                            };
                            result22.push(e22);
                        }
                        _rt::cabi_dealloc(base22, len22 * 24, 8);
                        result22
                    }
                }
            }
            impl Row {
                #[allow(unused_unsafe, clippy::all)]
                pub fn push(&self, cell: Option<&Cell>) {
                    unsafe {
                        let (result3_0, result3_1, result3_2, result3_3) = match cell {
                            Some(e) => {
                                let (result2_0, result2_1, result2_2) = match e {
                                    Cell::Bool(e) => (
                                        0i32,
                                        ::core::mem::MaybeUninit::new(i64::from(match e {
                                            true => 1,
                                            false => 0,
                                        })
                                            as u64),
                                        0usize,
                                    ),
                                    Cell::I8(e) => (
                                        1i32,
                                        ::core::mem::MaybeUninit::new(
                                            i64::from(_rt::as_i32(e)) as u64
                                        ),
                                        0usize,
                                    ),
                                    Cell::I16(e) => (
                                        2i32,
                                        ::core::mem::MaybeUninit::new(
                                            i64::from(_rt::as_i32(e)) as u64
                                        ),
                                        0usize,
                                    ),
                                    Cell::F32(e) => (
                                        3i32,
                                        ::core::mem::MaybeUninit::new(i64::from(
                                            (_rt::as_f32(e)).to_bits(),
                                        )
                                            as u64),
                                        0usize,
                                    ),
                                    Cell::I32(e) => (
                                        4i32,
                                        ::core::mem::MaybeUninit::new(
                                            i64::from(_rt::as_i32(e)) as u64
                                        ),
                                        0usize,
                                    ),
                                    Cell::F64(e) => (
                                        5i32,
                                        ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits()
                                            as i64
                                            as u64),
                                        0usize,
                                    ),
                                    Cell::I64(e) => (
                                        6i32,
                                        ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                        0usize,
                                    ),
                                    Cell::Numeric(e) => (
                                        7i32,
                                        ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits()
                                            as i64
                                            as u64),
                                        0usize,
                                    ),
                                    Cell::String(e) => {
                                        let vec0 = e;
                                        let ptr0 = vec0.as_ptr().cast::<u8>();
                                        let len0 = vec0.len();

                                        (
                                            8i32,
                                            {
                                                let mut t =
                                                    ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr()
                                                    .cast::<*mut u8>()
                                                    .write(ptr0.cast_mut());
                                                t
                                            },
                                            len0,
                                        )
                                    }
                                    Cell::Date(e) => (
                                        9i32,
                                        ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                        0usize,
                                    ),
                                    Cell::Timestamp(e) => (
                                        10i32,
                                        ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                        0usize,
                                    ),
                                    Cell::Json(e) => {
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();

                                        (
                                            11i32,
                                            {
                                                let mut t =
                                                    ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr()
                                                    .cast::<*mut u8>()
                                                    .write(ptr1.cast_mut());
                                                t
                                            },
                                            len1,
                                        )
                                    }
                                };

                                (1i32, result2_0, result2_1, result2_2)
                            }
                            None => (
                                0i32,
                                0i32,
                                ::core::mem::MaybeUninit::<u64>::zeroed(),
                                0usize,
                            ),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]row.push"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            result3_3,
                        );
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(index: u32) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]column"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(_rt::as_i32(&index));
                        Column::from_handle(ret as u32)
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]column.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn num(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]column.num"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Column {
                #[allow(unused_unsafe, clippy::all)]
                pub fn type_oid(&self) -> TypeOid {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]column.type-oid"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        let v0 = match ret {
                            0 => TypeOid::Bool,
                            1 => TypeOid::I8,
                            2 => TypeOid::I16,
                            3 => TypeOid::F32,
                            4 => TypeOid::I32,
                            5 => TypeOid::F64,
                            6 => TypeOid::I64,
                            7 => TypeOid::Numeric,
                            8 => TypeOid::String,
                            9 => TypeOid::Date,
                            10 => TypeOid::Timestamp,
                            n => {
                                debug_assert_eq!(n, 11, "invalid enum discriminant");
                                TypeOid::Json
                            }
                        };
                        v0
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(index: u32) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]qual"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(_rt::as_i32(&index));
                        Qual::from_handle(ret as u32)
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn field(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]qual.field"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn operator(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]qual.operator"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn value(&self) -> Value {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]qual.value"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        let v41 = match l1 {
                            0 => {
                                let e41 = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v19 = match l2 {
                                        0 => {
                                            let e19 = {
                                                let l3 = i32::from(*ptr0.add(16).cast::<u8>());

                                                _rt::bool_lift(l3 as u8)
                                            };
                                            Cell::Bool(e19)
                                        }
                                        1 => {
                                            let e19 = {
                                                let l4 = i32::from(*ptr0.add(16).cast::<i8>());

                                                l4 as i8
                                            };
                                            Cell::I8(e19)
                                        }
                                        2 => {
                                            let e19 = {
                                                let l5 = i32::from(*ptr0.add(16).cast::<i16>());

                                                l5 as i16
                                            };
                                            Cell::I16(e19)
                                        }
                                        3 => {
                                            let e19 = {
                                                let l6 = *ptr0.add(16).cast::<f32>();

                                                l6
                                            };
                                            Cell::F32(e19)
                                        }
                                        4 => {
                                            let e19 = {
                                                let l7 = *ptr0.add(16).cast::<i32>();

                                                l7
                                            };
                                            Cell::I32(e19)
                                        }
                                        5 => {
                                            let e19 = {
                                                let l8 = *ptr0.add(16).cast::<f64>();

                                                l8
                                            };
                                            Cell::F64(e19)
                                        }
                                        6 => {
                                            let e19 = {
                                                let l9 = *ptr0.add(16).cast::<i64>();

                                                l9
                                            };
                                            Cell::I64(e19)
                                        }
                                        7 => {
                                            let e19 = {
                                                let l10 = *ptr0.add(16).cast::<f64>();

                                                l10
                                            };
                                            Cell::Numeric(e19)
                                        }
                                        8 => {
                                            let e19 = {
                                                let l11 = *ptr0.add(16).cast::<*mut u8>();
                                                let l12 = *ptr0.add(20).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );

                                                _rt::string_lift(bytes13)
                                            };
                                            Cell::String(e19)
                                        }
                                        9 => {
                                            let e19 = {
                                                let l14 = *ptr0.add(16).cast::<i64>();

                                                l14
                                            };
                                            Cell::Date(e19)
                                        }
                                        10 => {
                                            let e19 = {
                                                let l15 = *ptr0.add(16).cast::<i64>();

                                                l15
                                            };
                                            Cell::Timestamp(e19)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 11, "invalid enum discriminant");
                                            let e19 = {
                                                let l16 = *ptr0.add(16).cast::<*mut u8>();
                                                let l17 = *ptr0.add(20).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );

                                                _rt::string_lift(bytes18)
                                            };
                                            Cell::Json(e19)
                                        }
                                    };

                                    v19
                                };
                                Value::Cell(e41)
                            }
                            n => {
                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                let e41 = {
                                    let l20 = *ptr0.add(8).cast::<*mut u8>();
                                    let l21 = *ptr0.add(12).cast::<usize>();
                                    let base40 = l20;
                                    let len40 = l21;
                                    let mut result40 = _rt::Vec::with_capacity(len40);
                                    for i in 0..len40 {
                                        let base = base40.add(i * 16);
                                        let e40 = {
                                            let l22 = i32::from(*base.add(0).cast::<u8>());
                                            let v39 = match l22 {
                                                0 => {
                                                    let e39 = {
                                                        let l23 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        _rt::bool_lift(l23 as u8)
                                                    };
                                                    Cell::Bool(e39)
                                                }
                                                1 => {
                                                    let e39 = {
                                                        let l24 =
                                                            i32::from(*base.add(8).cast::<i8>());

                                                        l24 as i8
                                                    };
                                                    Cell::I8(e39)
                                                }
                                                2 => {
                                                    let e39 = {
                                                        let l25 =
                                                            i32::from(*base.add(8).cast::<i16>());

                                                        l25 as i16
                                                    };
                                                    Cell::I16(e39)
                                                }
                                                3 => {
                                                    let e39 = {
                                                        let l26 = *base.add(8).cast::<f32>();

                                                        l26
                                                    };
                                                    Cell::F32(e39)
                                                }
                                                4 => {
                                                    let e39 = {
                                                        let l27 = *base.add(8).cast::<i32>();

                                                        l27
                                                    };
                                                    Cell::I32(e39)
                                                }
                                                5 => {
                                                    let e39 = {
                                                        let l28 = *base.add(8).cast::<f64>();

                                                        l28
                                                    };
                                                    Cell::F64(e39)
                                                }
                                                6 => {
                                                    let e39 = {
                                                        let l29 = *base.add(8).cast::<i64>();

                                                        l29
                                                    };
                                                    Cell::I64(e39)
                                                }
                                                7 => {
                                                    let e39 = {
                                                        let l30 = *base.add(8).cast::<f64>();

                                                        l30
                                                    };
                                                    Cell::Numeric(e39)
                                                }
                                                8 => {
                                                    let e39 = {
                                                        let l31 = *base.add(8).cast::<*mut u8>();
                                                        let l32 = *base.add(12).cast::<usize>();
                                                        let len33 = l32;
                                                        let bytes33 = _rt::Vec::from_raw_parts(
                                                            l31.cast(),
                                                            len33,
                                                            len33,
                                                        );

                                                        _rt::string_lift(bytes33)
                                                    };
                                                    Cell::String(e39)
                                                }
                                                9 => {
                                                    let e39 = {
                                                        let l34 = *base.add(8).cast::<i64>();

                                                        l34
                                                    };
                                                    Cell::Date(e39)
                                                }
                                                10 => {
                                                    let e39 = {
                                                        let l35 = *base.add(8).cast::<i64>();

                                                        l35
                                                    };
                                                    Cell::Timestamp(e39)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 11,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e39 = {
                                                        let l36 = *base.add(8).cast::<*mut u8>();
                                                        let l37 = *base.add(12).cast::<usize>();
                                                        let len38 = l37;
                                                        let bytes38 = _rt::Vec::from_raw_parts(
                                                            l36.cast(),
                                                            len38,
                                                            len38,
                                                        );

                                                        _rt::string_lift(bytes38)
                                                    };
                                                    Cell::Json(e39)
                                                }
                                            };

                                            v39
                                        };
                                        result40.push(e40);
                                    }
                                    _rt::cabi_dealloc(base40, len40 * 16, 8);

                                    result40
                                };
                                Value::Array(e41)
                            }
                        };
                        v41
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn use_or(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]qual.use-or"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn param(&self) -> Option<Param> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]qual.param"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();
                                    let l3 = *ptr0.add(8).cast::<i32>();

                                    Param {
                                        id: l2 as u32,
                                        type_oid: l3 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Qual {
                #[allow(unused_unsafe, clippy::all)]
                pub fn deparse(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]qual.deparse"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(index: u32) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]sort"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(_rt::as_i32(&index));
                        Sort::from_handle(ret as u32)
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn field(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]sort.field"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn field_no(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]sort.field-no"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn reversed(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]sort.reversed"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn nulls_first(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]sort.nulls-first"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn collate(&self) -> Option<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]sort.collate"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn deparse(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]sort.deparse"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Sort {
                #[allow(unused_unsafe, clippy::all)]
                pub fn deparse_with_collate(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]sort.deparse-with-collate"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Limit {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]limit"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Limit::from_handle(ret as u32)
                    }
                }
            }
            impl Limit {
                #[allow(unused_unsafe, clippy::all)]
                pub fn count(&self) -> i64 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]limit.count"]
                            fn wit_import(_: i32) -> i64;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret
                    }
                }
            }
            impl Limit {
                #[allow(unused_unsafe, clippy::all)]
                pub fn offset(&self) -> i64 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]limit.offset"]
                            fn wit_import(_: i32) -> i64;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret
                    }
                }
            }
            impl Limit {
                #[allow(unused_unsafe, clippy::all)]
                pub fn deparse(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]limit.deparse"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Options {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(options_type: OptionsType) -> Self {
                    unsafe {
                        let result0 = match options_type {
                            OptionsType::Server => 0i32,
                            OptionsType::Table => 1i32,
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]options"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(result0);
                        Options::from_handle(ret as u32)
                    }
                }
            }
            impl Options {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self, key: &str) -> Option<_rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]options.get"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Options {
                #[allow(unused_unsafe, clippy::all)]
                pub fn require(&self, key: &str) -> Result<_rt::String, FdwError> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]options.require"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = *ptr1.add(4).cast::<*mut u8>();
                                    let l7 = *ptr1.add(8).cast::<usize>();
                                    let len8 = l7;
                                    let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                    _rt::string_lift(bytes8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Options {
                #[allow(unused_unsafe, clippy::all)]
                pub fn require_or(&self, key: &str, default: &str) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = default;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]options.require-or"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = *ptr2.add(0).cast::<*mut u8>();
                        let l4 = *ptr2.add(4).cast::<usize>();
                        let len5 = l4;
                        let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                        _rt::string_lift(bytes5)
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]context"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Context::from_handle(ret as u32)
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_options(&self, options_type: OptionsType) -> Options {
                    unsafe {
                        let result0 = match options_type {
                            OptionsType::Server => 0i32,
                            OptionsType::Table => 1i32,
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]context.get-options"]
                            fn wit_import(_: i32, _: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, result0);
                        Options::from_handle(ret as u32)
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_quals(&self) -> _rt::Vec<Qual> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]context.get-quals"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                Qual::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<Column> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]context.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                Column::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_sorts(&self) -> _rt::Vec<Sort> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]context.get-sorts"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                Sort::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Context {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_limit(&self) -> Option<Limit> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "supabase:wrappers/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]context.get-limit"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    Limit::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod supabase {
        #[allow(dead_code)]
        pub mod wrappers {
            #[allow(dead_code, clippy::all)]
            pub mod routines {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Cell = super::super::super::super::supabase::wrappers::types::Cell;
                pub type Row = super::super::super::super::supabase::wrappers::types::Row;
                pub type Context = super::super::super::super::supabase::wrappers::types::Context;
                pub type FdwError = super::super::super::super::supabase::wrappers::types::FdwError;
                pub type FdwResult =
                    super::super::super::super::supabase::wrappers::types::FdwResult;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_init_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::init({
                        handle0 = super::super::super::super::supabase::wrappers::types::Context::from_handle(arg0 as u32);
                        &handle0
                    });
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_init<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_begin_scan_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::begin_scan({
                        handle0 = super::super::super::super::supabase::wrappers::types::Context::from_handle(arg0 as u32);
                        &handle0
                    });
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_begin_scan<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_iter_scan_cabi<T: Guest>(arg0: i32, arg1: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle0;
                    let handle1;
                    let result2 = T::iter_scan(
                        {
                            handle0 = super::super::super::super::supabase::wrappers::types::Context::from_handle(arg0 as u32);
                            &handle0
                        },
                        {
                            handle1 = super::super::super::super::supabase::wrappers::types::Row::from_handle(arg1 as u32);
                            &handle1
                        },
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                Some(e) => {
                                    *ptr3.add(4).cast::<u8>() = (1i32) as u8;
                                    *ptr3.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr3.add(4).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3.add(8).cast::<usize>() = len4;
                            *ptr3.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_iter_scan<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_re_scan_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::re_scan({
                        handle0 = super::super::super::super::supabase::wrappers::types::Context::from_handle(arg0 as u32);
                        &handle0
                    });
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_re_scan<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_end_scan_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::end_scan({
                        handle0 = super::super::super::super::supabase::wrappers::types::Context::from_handle(arg0 as u32);
                        &handle0
                    });
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_end_scan<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_begin_modify_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::begin_modify({
                        handle0 = super::super::super::super::supabase::wrappers::types::Context::from_handle(arg0 as u32);
                        &handle0
                    });
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_begin_modify<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_insert_cabi<T: Guest>(arg0: i32, arg1: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle0;
                    let handle1;
                    let result2 = T::insert(
                        {
                            handle0 = super::super::super::super::supabase::wrappers::types::Context::from_handle(arg0 as u32);
                            &handle0
                        },
                        {
                            handle1 = super::super::super::super::supabase::wrappers::types::Row::from_handle(arg1 as u32);
                            &handle1
                        },
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result2 {
                        Ok(_) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr3.add(8).cast::<usize>() = len4;
                            *ptr3.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_insert<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: ::core::mem::MaybeUninit<u64>,
                    arg3: usize,
                    arg4: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle0;
                    let handle4;
                    use super::super::super::super::supabase::wrappers::types::Cell as V3;
                    let v3 = match arg1 {
                        0 => {
                            let e3 = _rt::bool_lift(arg2.assume_init() as i64 as i32 as u8);
                            V3::Bool(e3)
                        }
                        1 => {
                            let e3 = arg2.assume_init() as i64 as i32 as i8;
                            V3::I8(e3)
                        }
                        2 => {
                            let e3 = arg2.assume_init() as i64 as i32 as i16;
                            V3::I16(e3)
                        }
                        3 => {
                            let e3 = f32::from_bits(arg2.assume_init() as i64 as u32);
                            V3::F32(e3)
                        }
                        4 => {
                            let e3 = arg2.assume_init() as i64 as i32;
                            V3::I32(e3)
                        }
                        5 => {
                            let e3 = f64::from_bits(arg2.assume_init() as i64 as u64);
                            V3::F64(e3)
                        }
                        6 => {
                            let e3 = arg2.assume_init() as i64;
                            V3::I64(e3)
                        }
                        7 => {
                            let e3 = f64::from_bits(arg2.assume_init() as i64 as u64);
                            V3::Numeric(e3)
                        }
                        8 => {
                            let e3 = {
                                let len1 = arg3;
                                let bytes1 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len1,
                                    len1,
                                );

                                _rt::string_lift(bytes1)
                            };
                            V3::String(e3)
                        }
                        9 => {
                            let e3 = arg2.assume_init() as i64;
                            V3::Date(e3)
                        }
                        10 => {
                            let e3 = arg2.assume_init() as i64;
                            V3::Timestamp(e3)
                        }
                        n => {
                            debug_assert_eq!(n, 11, "invalid enum discriminant");
                            let e3 = {
                                let len2 = arg3;
                                let bytes2 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len2,
                                    len2,
                                );

                                _rt::string_lift(bytes2)
                            };
                            V3::Json(e3)
                        }
                    };
                    let result5 = T::update(
                        {
                            handle0 = super::super::super::super::supabase::wrappers::types::Context::from_handle(arg0 as u32);
                            &handle0
                        },
                        v3,
                        {
                            handle4 = super::super::super::super::supabase::wrappers::types::Row::from_handle(arg4 as u32);
                            &handle4
                        },
                    );
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(_) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6.add(8).cast::<usize>() = len7;
                            *ptr6.add(4).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_delete_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: ::core::mem::MaybeUninit<u64>,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle0;
                    use super::super::super::super::supabase::wrappers::types::Cell as V3;
                    let v3 = match arg1 {
                        0 => {
                            let e3 = _rt::bool_lift(arg2.assume_init() as i64 as i32 as u8);
                            V3::Bool(e3)
                        }
                        1 => {
                            let e3 = arg2.assume_init() as i64 as i32 as i8;
                            V3::I8(e3)
                        }
                        2 => {
                            let e3 = arg2.assume_init() as i64 as i32 as i16;
                            V3::I16(e3)
                        }
                        3 => {
                            let e3 = f32::from_bits(arg2.assume_init() as i64 as u32);
                            V3::F32(e3)
                        }
                        4 => {
                            let e3 = arg2.assume_init() as i64 as i32;
                            V3::I32(e3)
                        }
                        5 => {
                            let e3 = f64::from_bits(arg2.assume_init() as i64 as u64);
                            V3::F64(e3)
                        }
                        6 => {
                            let e3 = arg2.assume_init() as i64;
                            V3::I64(e3)
                        }
                        7 => {
                            let e3 = f64::from_bits(arg2.assume_init() as i64 as u64);
                            V3::Numeric(e3)
                        }
                        8 => {
                            let e3 = {
                                let len1 = arg3;
                                let bytes1 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len1,
                                    len1,
                                );

                                _rt::string_lift(bytes1)
                            };
                            V3::String(e3)
                        }
                        9 => {
                            let e3 = arg2.assume_init() as i64;
                            V3::Date(e3)
                        }
                        10 => {
                            let e3 = arg2.assume_init() as i64;
                            V3::Timestamp(e3)
                        }
                        n => {
                            debug_assert_eq!(n, 11, "invalid enum discriminant");
                            let e3 = {
                                let len2 = arg3;
                                let bytes2 = _rt::Vec::from_raw_parts(
                                    arg2.as_ptr().cast::<*mut u8>().read().cast(),
                                    len2,
                                    len2,
                                );

                                _rt::string_lift(bytes2)
                            };
                            V3::Json(e3)
                        }
                    };
                    let result4 = T::delete(
                        {
                            handle0 = super::super::super::super::supabase::wrappers::types::Context::from_handle(arg0 as u32);
                            &handle0
                        },
                        v3,
                    );
                    let ptr5 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result4 {
                        Ok(_) => {
                            *ptr5.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr5.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr5.add(8).cast::<usize>() = len6;
                            *ptr5.add(4).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr5
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_delete<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_end_modify_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let handle0;
                    let result1 = T::end_modify({
                        handle0 = super::super::super::super::supabase::wrappers::types::Context::from_handle(arg0 as u32);
                        &handle0
                    });
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_end_modify<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// ----------------------------------------------
                    /// foreign data wrapper interface functions
                    /// ----------------------------------------------
                    /// fdw initialization
                    fn init(ctx: &Context) -> FdwResult;
                    /// data scan
                    fn begin_scan(ctx: &Context) -> FdwResult;
                    fn iter_scan(ctx: &Context, row: &Row) -> Result<Option<u32>, FdwError>;
                    fn re_scan(ctx: &Context) -> FdwResult;
                    fn end_scan(ctx: &Context) -> FdwResult;
                    /// data modify
                    fn begin_modify(ctx: &Context) -> FdwResult;
                    fn insert(ctx: &Context, row: &Row) -> FdwResult;
                    fn update(ctx: &Context, rowid: Cell, new_row: &Row) -> FdwResult;
                    fn delete(ctx: &Context, rowid: Cell) -> FdwResult;
                    fn end_modify(ctx: &Context) -> FdwResult;
                }
                #[doc(hidden)]

                macro_rules! __export_supabase_wrappers_routines_0_1_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "supabase:wrappers/routines@0.1.0#init"]
    unsafe extern "C" fn export_init(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_init_cabi::<$ty>(arg0)
    }
    #[export_name = "cabi_post_supabase:wrappers/routines@0.1.0#init"]
    unsafe extern "C" fn _post_return_init(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_init::<$ty>(arg0)
    }
    #[export_name = "supabase:wrappers/routines@0.1.0#begin-scan"]
    unsafe extern "C" fn export_begin_scan(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_begin_scan_cabi::<$ty>(arg0)
    }
    #[export_name = "cabi_post_supabase:wrappers/routines@0.1.0#begin-scan"]
    unsafe extern "C" fn _post_return_begin_scan(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_begin_scan::<$ty>(arg0)
    }
    #[export_name = "supabase:wrappers/routines@0.1.0#iter-scan"]
    unsafe extern "C" fn export_iter_scan(arg0: i32,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_iter_scan_cabi::<$ty>(arg0, arg1)
    }
    #[export_name = "cabi_post_supabase:wrappers/routines@0.1.0#iter-scan"]
    unsafe extern "C" fn _post_return_iter_scan(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_iter_scan::<$ty>(arg0)
    }
    #[export_name = "supabase:wrappers/routines@0.1.0#re-scan"]
    unsafe extern "C" fn export_re_scan(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_re_scan_cabi::<$ty>(arg0)
    }
    #[export_name = "cabi_post_supabase:wrappers/routines@0.1.0#re-scan"]
    unsafe extern "C" fn _post_return_re_scan(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_re_scan::<$ty>(arg0)
    }
    #[export_name = "supabase:wrappers/routines@0.1.0#end-scan"]
    unsafe extern "C" fn export_end_scan(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_end_scan_cabi::<$ty>(arg0)
    }
    #[export_name = "cabi_post_supabase:wrappers/routines@0.1.0#end-scan"]
    unsafe extern "C" fn _post_return_end_scan(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_end_scan::<$ty>(arg0)
    }
    #[export_name = "supabase:wrappers/routines@0.1.0#begin-modify"]
    unsafe extern "C" fn export_begin_modify(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_begin_modify_cabi::<$ty>(arg0)
    }
    #[export_name = "cabi_post_supabase:wrappers/routines@0.1.0#begin-modify"]
    unsafe extern "C" fn _post_return_begin_modify(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_begin_modify::<$ty>(arg0)
    }
    #[export_name = "supabase:wrappers/routines@0.1.0#insert"]
    unsafe extern "C" fn export_insert(arg0: i32,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_insert_cabi::<$ty>(arg0, arg1)
    }
    #[export_name = "cabi_post_supabase:wrappers/routines@0.1.0#insert"]
    unsafe extern "C" fn _post_return_insert(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_insert::<$ty>(arg0)
    }
    #[export_name = "supabase:wrappers/routines@0.1.0#update"]
    unsafe extern "C" fn export_update(arg0: i32,arg1: i32,arg2: ::core::mem::MaybeUninit::<u64>,arg3: usize,arg4: i32,) -> *mut u8 {
      $($path_to_types)*::_export_update_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4)
    }
    #[export_name = "cabi_post_supabase:wrappers/routines@0.1.0#update"]
    unsafe extern "C" fn _post_return_update(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_update::<$ty>(arg0)
    }
    #[export_name = "supabase:wrappers/routines@0.1.0#delete"]
    unsafe extern "C" fn export_delete(arg0: i32,arg1: i32,arg2: ::core::mem::MaybeUninit::<u64>,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_delete_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_supabase:wrappers/routines@0.1.0#delete"]
    unsafe extern "C" fn _post_return_delete(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_delete::<$ty>(arg0)
    }
    #[export_name = "supabase:wrappers/routines@0.1.0#end-modify"]
    unsafe extern "C" fn export_end_modify(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_end_modify_cabi::<$ty>(arg0)
    }
    #[export_name = "cabi_post_supabase:wrappers/routines@0.1.0#end-modify"]
    unsafe extern "C" fn _post_return_end_modify(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_end_modify::<$ty>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_supabase_wrappers_routines_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_helloworld_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::supabase::wrappers::routines::__export_supabase_wrappers_routines_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::supabase::wrappers::routines);
  )
}
#[doc(inline)]
pub(crate) use __export_helloworld_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:helloworld:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2466] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa1\x12\x01A\x02\x01\
A\x09\x01Br\x01q\x0c\x04bool\0\0\x02i8\0\0\x03i16\0\0\x03f32\0\0\x03i32\0\0\x03f\
64\0\0\x03i64\0\0\x07numeric\0\0\x06string\0\0\x04date\0\0\x09timestamp\0\0\x04j\
son\0\0\x04\0\x08type-oid\x03\0\0\x01q\x0c\x04bool\x01\x7f\0\x02i8\x01~\0\x03i16\
\x01|\0\x03f32\x01v\0\x03i32\x01z\0\x03f64\x01u\0\x03i64\x01x\0\x07numeric\x01u\0\
\x06string\x01s\0\x04date\x01x\0\x09timestamp\x01x\0\x04json\x01s\0\x04\0\x04cel\
l\x03\0\x02\x04\0\x03row\x03\x01\x04\0\x06column\x03\x01\x01p\x03\x01q\x02\x04ce\
ll\x01\x03\0\x05array\x01\x06\0\x04\0\x05value\x03\0\x07\x01r\x02\x02idy\x08type\
-oidy\x04\0\x05param\x03\0\x09\x04\0\x04qual\x03\x01\x04\0\x04sort\x03\x01\x04\0\
\x05limit\x03\x01\x01q\x02\x06server\0\0\x05table\0\0\x04\0\x0coptions-type\x03\0\
\x0e\x04\0\x07options\x03\x01\x04\0\x07context\x03\x01\x01s\x04\0\x09fdw-error\x03\
\0\x12\x01j\0\x01\x13\x04\0\x0afdw-result\x03\0\x14\x01i\x04\x01@\0\0\x16\x04\0\x10\
[constructor]row\x01\x17\x01h\x04\x01ps\x01@\x01\x04self\x18\0\x19\x04\0\x10[met\
hod]row.cols\x01\x1a\x01k\x03\x01p\x1b\x01@\x01\x04self\x18\0\x1c\x04\0\x11[meth\
od]row.cells\x01\x1d\x01@\x02\x04self\x18\x04cell\x1b\x01\0\x04\0\x10[method]row\
.push\x01\x1e\x01i\x05\x01@\x01\x05indexy\0\x1f\x04\0\x13[constructor]column\x01\
\x20\x01h\x05\x01@\x01\x04self!\0s\x04\0\x13[method]column.name\x01\"\x01@\x01\x04\
self!\0y\x04\0\x12[method]column.num\x01#\x01@\x01\x04self!\0\x01\x04\0\x17[meth\
od]column.type-oid\x01$\x01i\x0b\x01@\x01\x05indexy\0%\x04\0\x11[constructor]qua\
l\x01&\x01h\x0b\x01@\x01\x04self'\0s\x04\0\x12[method]qual.field\x01(\x04\0\x15[\
method]qual.operator\x01(\x01@\x01\x04self'\0\x08\x04\0\x12[method]qual.value\x01\
)\x01@\x01\x04self'\0\x7f\x04\0\x13[method]qual.use-or\x01*\x01k\x0a\x01@\x01\x04\
self'\0+\x04\0\x12[method]qual.param\x01,\x04\0\x14[method]qual.deparse\x01(\x01\
i\x0c\x01@\x01\x05indexy\0-\x04\0\x11[constructor]sort\x01.\x01h\x0c\x01@\x01\x04\
self/\0s\x04\0\x12[method]sort.field\x010\x01@\x01\x04self/\0y\x04\0\x15[method]\
sort.field-no\x011\x01@\x01\x04self/\0\x7f\x04\0\x15[method]sort.reversed\x012\x04\
\0\x18[method]sort.nulls-first\x012\x01ks\x01@\x01\x04self/\03\x04\0\x14[method]\
sort.collate\x014\x04\0\x14[method]sort.deparse\x010\x04\0![method]sort.deparse-\
with-collate\x010\x01i\x0d\x01@\0\05\x04\0\x12[constructor]limit\x016\x01h\x0d\x01\
@\x01\x04self7\0x\x04\0\x13[method]limit.count\x018\x04\0\x14[method]limit.offse\
t\x018\x01@\x01\x04self7\0s\x04\0\x15[method]limit.deparse\x019\x01i\x10\x01@\x01\
\x0coptions-type\x0f\0:\x04\0\x14[constructor]options\x01;\x01h\x10\x01@\x02\x04\
self<\x03keys\03\x04\0\x13[method]options.get\x01=\x01j\x01s\x01\x13\x01@\x02\x04\
self<\x03keys\0>\x04\0\x17[method]options.require\x01?\x01@\x03\x04self<\x03keys\
\x07defaults\0s\x04\0\x1a[method]options.require-or\x01@\x01i\x11\x01@\0\0\xc1\0\
\x04\0\x14[constructor]context\x01B\x01h\x11\x01@\x02\x04self\xc3\0\x0coptions-t\
ype\x0f\0:\x04\0\x1b[method]context.get-options\x01D\x01p%\x01@\x01\x04self\xc3\0\
\0\xc5\0\x04\0\x19[method]context.get-quals\x01F\x01p\x1f\x01@\x01\x04self\xc3\0\
\0\xc7\0\x04\0\x1b[method]context.get-columns\x01H\x01p-\x01@\x01\x04self\xc3\0\0\
\xc9\0\x04\0\x19[method]context.get-sorts\x01J\x01k5\x01@\x01\x04self\xc3\0\0\xcb\
\0\x04\0\x19[method]context.get-limit\x01L\x03\x01\x1dsupabase:wrappers/types@0.\
1.0\x05\0\x02\x03\0\0\x04cell\x02\x03\0\0\x03row\x02\x03\0\0\x07context\x02\x03\0\
\0\x09fdw-error\x02\x03\0\0\x0afdw-result\x01B\x1d\x02\x03\x02\x01\x01\x04\0\x04\
cell\x03\0\0\x02\x03\x02\x01\x02\x04\0\x03row\x03\0\x02\x02\x03\x02\x01\x03\x04\0\
\x07context\x03\0\x04\x02\x03\x02\x01\x04\x04\0\x09fdw-error\x03\0\x06\x02\x03\x02\
\x01\x05\x04\0\x0afdw-result\x03\0\x08\x01h\x05\x01@\x01\x03ctx\x0a\0\x09\x04\0\x04\
init\x01\x0b\x04\0\x0abegin-scan\x01\x0b\x01h\x03\x01ky\x01j\x01\x0d\x01\x07\x01\
@\x02\x03ctx\x0a\x03row\x0c\0\x0e\x04\0\x09iter-scan\x01\x0f\x04\0\x07re-scan\x01\
\x0b\x04\0\x08end-scan\x01\x0b\x04\0\x0cbegin-modify\x01\x0b\x01@\x02\x03ctx\x0a\
\x03row\x0c\0\x09\x04\0\x06insert\x01\x10\x01@\x03\x03ctx\x0a\x05rowid\x01\x07ne\
w-row\x0c\0\x09\x04\0\x06update\x01\x11\x01@\x02\x03ctx\x0a\x05rowid\x01\0\x09\x04\
\0\x06delete\x01\x12\x04\0\x0aend-modify\x01\x0b\x04\x01\x20supabase:wrappers/ro\
utines@0.1.0\x05\x06\x04\x01(supabase:helloworld-fdw/helloworld@0.1.0\x04\0\x0b\x10\
\x01\0\x0ahelloworld\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-comp\
onent\x070.202.0\x10wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
